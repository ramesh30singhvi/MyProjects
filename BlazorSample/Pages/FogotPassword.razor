@page "/forgot-password"
@layout LoginLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Client.ViewModels.SA
@using CellarPassAppAdmin.Shared.Enums
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Models.RequestModel.SA
@inject IJSRuntime JS
@inject NavigationManager _navigationManager
@inject HttpClient Http
@inject Microsoft.Extensions.Configuration.IConfiguration config
@inject ILoginViewModel _loginViewModel
@inject ToastService toastService

<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<EditForm Model="@forgotPassword" Context="formContext">
    <DataAnnotationsValidator />
    <div class="@(!PasswordSectionVisibility ? "displayNone" : "")">
        <div class="my-2">
            <h3>Forgot your password?</h3>
            <p class="mb-4">Enter the email address associated with your account and we will send you a reset code.</p>
            <form>
                <div class="mb-3">
                    <input class="form-control" @bind-value="forgotPassword.Email" type="email" placeholder="Email address" />
                    <ValidationMessage For="@(() => forgotPassword.Email)" />
                </div>
                <div>
                    <ReCAPTCHA @ref="reCAPTCHAComponent" SiteKey="@config["App:GoogleReCAPTCHASiteKey"]" OnSuccess="OnSuccess" OnExpired="OnExpired" />
                </div>
                <div class="mb-3 d-grid">
                    <button class="btn btn-primary my-4" @onclick="@(() => OnClickPost(formContext))" disabled="@DisablePostButton()" name="submit">Send Reset Link</button>
                </div>
            </form>
            <div class="fs--1">Never mind, <a href="login">I want to sign in</a>.</div>

            <div class="mt-2">
                <span class="fs--1"><span class="fa fa-flag me-2"></span>If you don't get an email from us within a few minutes please be sure to check your spam filter.</span>
            </div>
        </div>
    </div>

    <div class="@(PasswordSectionVisibility ? "displayNone" : "")">
        <div class="pflex-grow-1">
            <div class="text-center text-md-start">
                <h3>
                    Password Reset Sent
                </h3>
                <strong>You’re almost done</strong>
                <p class="mb-4">We’ve just sent you an email with a link to reset your password.</p>
            </div>
            <div class="text-center text-md-start mt-2">
                <span class="fs--1"> <i class="fa fa-flag"></i> If you don't get an email from us within a few minutes please be sure to check your spam filter.</span>
            </div>
            <div class="mb-3 text-end">
                <a href="login" class="btn btn-primary btn-block mt-6" name="countinue">Continue</a>
            </div>
        </div>
    </div>


</EditForm>
<Toast></Toast>

@code {
    private bool SpinnerVisibility = false;

    private ReCAPTCHA reCAPTCHAComponent;

    private bool ValidReCAPTCHA = false;

    private bool ServerVerificating = false;

    private bool PasswordSectionVisibility = true;

    private bool DisablePostButton()
    {
        return !ValidReCAPTCHA || ServerVerificating;
    }

    private void OnSuccess()
    {
        ValidReCAPTCHA = true;
    }

    private void OnExpired()
    {
        ValidReCAPTCHA = false;
    }
    ForgotPasswordRequestModel forgotPassword = new ForgotPasswordRequestModel();
    protected async Task OnClickPost(EditContext editContext)
    {
        if (ValidReCAPTCHA)
        {
            SpinnerVisibility = true;
            var response = await reCAPTCHAComponent.GetResponseAsync();
            ServerVerificating = true;
            StateHasChanged();
            var varificationResponse = await _loginViewModel.ReCAPTCHAValidation(new ReCAPTCHARequestModel { ReCAPTCHAResponse = response });
            if (varificationResponse.success && editContext.Validate())
            {
                var userDetail = await _loginViewModel.EmailExist(forgotPassword.Email);
                if (!userDetail.success)
                {
                    SpinnerVisibility = false;
                    ServerVerificating = false;
                    StateHasChanged();
                    toastService.ShowToast($"User doesn't exist with {forgotPassword.Email}", ToastLevel.Error);
                }
                else
                {
                    var emailResponse = await _loginViewModel.SendForgotPasswordEmailNotification(new ForgotPasswordEmailRequestModel
                    {
                        Email = forgotPassword.Email
                    });
                    SpinnerVisibility = false;
                    if (emailResponse.success)
                    {
                        PasswordSectionVisibility = false;
                        toastService.ShowToast("Email Sent.", ToastLevel.Success);
                    }
                    else
                    {
                        toastService.ShowToast(emailResponse.error_info.description, ToastLevel.Error);
                    }
                }
            }
            else
            {
                ServerVerificating = false;
                toastService.ShowToast(varificationResponse.error_info.description, ToastLevel.Error);
                StateHasChanged();
            }
            SpinnerVisibility = false;
        }
    }
}