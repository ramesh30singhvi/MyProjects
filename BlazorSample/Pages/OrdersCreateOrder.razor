@page "/store/create-order"
@page "/store/create-order/{OrderGUID:guid}"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Enums
@using Syncfusion.Blazor.InPlaceEditor
@using Blazored.LocalStorage
@using Syncfusion.Blazor.DropDowns
@using System.Globalization;
@using System
@using Microsoft.Extensions.Options
@using CellarPassAppAdmin.Client.Models
@using System.ComponentModel.DataAnnotations;
@using System.Threading;
@using System.Threading.Tasks;
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using CellarPassAppAdmin.Shared.Entities.v4
@using System.Text.RegularExpressions;
@inject IMemberViewModel _memberViewModel
@inject IBusinessViewModel _businessViewModel 
@inject ILoginViewModel _loginViewModel
@inject ITicketViewModel _ticketViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject IOrderViewModel _orderViewModel
@inject IUserViewModel _userViewModel
@inject ICountryViewModel _countryViewModel
@inject IStateViewModel _stateViewModel
@inject IStateViewModel _stateViewModel
@inject ITeamViewModel _teamViewModel
@inject IProductViewModel _productViewModel
@inject IStoreCollectionViewModel _storeCollectionViewModel
@inject ICustomerViewModel _customerViewModel
@inject IBusinessPropertyViewModel _businessPropertyViewModel
@inject ISalesOrderViewModel _salesOrderViewModel
@inject IPaymentViewModel _paymentViewModel
@inject IInventoryViewModel _inventoryViewModel
@inject IDiscountViewModel _discountViewModel
@inject IOptions<SynergyAppSettings> _synergyAppSettings
@inject ILocalStorageService localStorage
@inject ToastService toastService
@inject NavigationManager NavigationManager
@inject HttpClient http
@attribute [Authorize]

<AuthorizeView>
    <Authorized Context="create_order">
        <Title Value="@title"></Title>
        <SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
        <div class="card shadow-none border mb-4">
            <div class="card-header border-bottom">
                <div class="row justify-content-between align-items-center">
                    <div class="col-md-7">
                        <h5 class="mb-3 mb-md-0">
                            <span class="far fa-shopping-bag me-2"></span>
                            Create Order
                        </h5>
                    </div>
                    <div class="col-md-5 justify-content-end d-flex">
                        <SfDropDownList CssClass="me-2" TValue="int" @bind-value="@propertyId"
                                        TItem="BusinessPropertyModel" Placeholder="Select Business Profile" AllowFiltering="true"
                                        DataSource="@businessProfiles">
                            <DropDownListEvents TItem="BusinessPropertyModel" TValue="int" ValueChange="GetSalesOrderSettings"></DropDownListEvents>
                            <DropDownListFieldSettings Text="PropertyName" Value="Id"></DropDownListFieldSettings>
                        </SfDropDownList>
                        @if (customerSelected || ProductDataList.Any())
                        {
                            <div class="dropdown font-sans-serif btn-reveal-trigger">
                                <button class="btn btn-falcon-primary btn-sm dropdown-toggle btn-reveal dropdown-caret-none h-100" type="button" id="dropdown-btn-order" data-bs-toggle="dropdown" data-boundary="viewport" aria-haspopup="true" aria-expanded="false"><span class="fas fa-ellipsis-h fs--2"></span></button>
                                <div class="dropdown-menu dropdown-menu-end border py-2" aria-labelledby="dropdown-btn-order">
                                    @{
                                        if (ProductDataList.Any() && order.OrderStatus != OrderStatus.Suspended)
                                        {
                                            <a class="dropdown-item" href="javascript:void(0);" @onclick="@ShowSuspendOrderModal">Suspend Order</a>
                                        }
                                        if (order.OrderStatus == OrderStatus.Suspended)
                                        {
                                            <a class="dropdown-item" href="javascript:void(0);" @onclick="@ApplyShoppingCartStatus">Shopping Cart</a>
                                        }
                                        if (customerSelected)
                                        {
                                            <a class="dropdown-item" href="javascript:void(0);" @onclick="@ShowRemoveCustomerModal">Remove Customer</a>
                                            if (ProductDataList.Any())
                                            {
                                                <a class="dropdown-item" href="javascript:void(0);" @onclick="@ShowSendCartToCustomerModal">Send Cart to Customer</a>
                                            }
                                        }
                                    }
                                    <hr class="m-0" />
                                    @{
                                        if (customerSelected || ProductDataList.Any() || order.OrderTenders.Any())
                                        {
                                            <a class="dropdown-item text-danger" href="javascript:void(0);" @onclick="@ShowClearOrderModal">Clear Order</a>
                                        }
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-12 col-md-9">
                        <div class="row mb-4">
                            <div class="col-12 col-md-6">
                                <h5 class="mb-3 fs-0 text-uppercase text-500">
                                    Bill To
                                    @{
                                        if (customerSelected)
                                        {
                                            <a class="btn btn-sm btn-link" href="javascript:void();" @onclick="() => OpenAddressModal(OrderCustomerType.BillTo)"><span class="fa-regular fa-pencil"></span></a>
                                        }
                                        else
                                        {
                                            <button class="btn btn-sm btn-outline-primary" id="addNewCustomerBtn" href="javascript:void();" @onclick="@AddNewCustomer">Add New</button>
                                        }
                                    }
                                </h5>

                                @if (customerSelected)
                                {
                                    if (order.BillToCustomer != null)
                                    {
                                        <h6 class="mb-2">
                                            <a href="javascript:void(0)">@((!string.IsNullOrWhiteSpace(order.BillToCustomer.FirstName) ? order.BillToCustomer.FirstName + " " : "") + (!string.IsNullOrWhiteSpace(order.BillToCustomer.LastName) ?order.BillToCustomer.LastName : ""))</a>
                                        </h6>
                                        if (order.BillingAddress != null)
                                        {
                                            var billingAddress = order.BillingAddress;
                                            if (!string.IsNullOrWhiteSpace(billingAddress.Address1))
                                            {
                                                <p class="mb-1 fs--1">@(billingAddress.Address1)</p>
                                            }
                                            if (!string.IsNullOrWhiteSpace(billingAddress.Address2))
                                            {
                                                <p class="mb-1 fs--1">@billingAddress.Address2</p>
                                            }
                                            <p class="mb-1 fs--1">
                                                @((!string.IsNullOrWhiteSpace(billingAddress.City) ?billingAddress.City + ", " : "") +
                                                    (!string.IsNullOrWhiteSpace(billingAddress.StateCode) ? billingAddress.StateCode + ", " : "") +
                                                    (!string.IsNullOrWhiteSpace(billingAddress.ZipCode) ? billingAddress.ZipCode + " " : "") +
                                                    ((!string.IsNullOrWhiteSpace(billingAddress.Country) && billingAddress.Country.ToUpper() != _USCountry) ? billingAddress.Country : ""))
                                            </p>
                                            <p class="mb-0 fs--1">
                                                <a href="mailto:@order.BillToCustomer.Email">@order.BillToCustomer.Email</a>
                                            </p>
                                            <p class="mb-0 fs--1">
                                                <a href="tel:@order.BillingAddress.PhoneFormatted">@order.BillingAddress.PhoneFormatted</a>
                                            </p>
                                        }
                                    }
                                }
                                else
                                {
                                    <SfDropDownList @ref="customersddlObj" TItem="CustomCustomerModel" Placeholder="Search Customer" AllowFiltering="true" TValue="string" DataSource="@customers">
                                        <DropDownListEvents TItem="CustomCustomerModel" TValue="string" OnValueSelect="@OnExistingCustomerSelection" Filtering="FilterExistingCustomers"></DropDownListEvents>
                                        <DropDownListFieldSettings Text="Name" Value="Id"></DropDownListFieldSettings>
                                    </SfDropDownList>
                                }
                            </div>
                            <div class="col-12 col-md-6">

                                @if (customerSelected && order.DeliveryMethod != OrderDeliveryMethod.Pickup)
                                {
                                    <h5 class="mb-3 fs-0 text-uppercase text-500">
                                        Ship To
                                        <a class="btn btn-sm btn-link" href="javascript:void();" @onclick="() => OpenAddressModal(OrderCustomerType.ShipTo)"><span class="fa-regular fa-pencil"></span></a>
                                    </h5>
                                    if (order.ShipToCustomer != null)
                                    {
                                        var shippingCustomer = order.ShipToCustomer;
                                        <h6 class="mb-2">
                                            <a href="javascript:void(0)">@((!string.IsNullOrWhiteSpace(shippingCustomer.FirstName) ?shippingCustomer.FirstName + " " : "") + (!string.IsNullOrWhiteSpace(shippingCustomer.LastName) ?shippingCustomer.LastName : ""))</a>
                                        </h6>
                                        if (order.ShippingAddress != null)
                                        {
                                            var shippingAddress = order.ShippingAddress;
                                            if (!string.IsNullOrWhiteSpace(shippingAddress.Address1))
                                            {
                                                <p class="mb-1 fs--1">@(shippingAddress.Address1)</p>
                                            }
                                            if (!string.IsNullOrWhiteSpace(shippingAddress.Address2))
                                            {
                                                <p class="mb-1 fs--1">@shippingAddress.Address2</p>
                                            }
                                            <p class="mb-1 fs--1">
                                                @((!string.IsNullOrWhiteSpace(shippingAddress.City) ? shippingAddress.City + ", " : "") +
                                                    (!string.IsNullOrWhiteSpace(shippingAddress.StateCode) ? shippingAddress.StateCode + ", " : "") +
                                                    (!string.IsNullOrWhiteSpace(shippingAddress.ZipCode) ? shippingAddress.ZipCode + " " : "") +
                                                    ((!string.IsNullOrWhiteSpace(shippingAddress.Country) && shippingAddress.Country.ToUpper() != _USCountry) ? shippingAddress.Country : ""))
                                            </p>
                                            <p class="mb-0 fs--1">
                                                <a href="mailto:@shippingCustomer.Email">@shippingCustomer.Email</a>
                                            </p>
                                            <p class="mb-0 fs--1">
                                                <a href="tel:@shippingAddress.PhoneFormatted">@shippingAddress.PhoneFormatted</a>
                                            </p>
                                        }
                                    }
                                }
                            </div>
                        </div>
                        @{
                            <div class="mt-3">
                                <div class="row mb-3">
                                    <div class="col-12">
                                        <SfDropDownList @ref="productddlObj" TItem="CustomProductListModel" Placeholder="Search products" TValue="int" AllowFiltering="true" DataSource="@productDDList">
                                            <DropDownListEvents TItem="CustomProductListModel" TValue="int" Focus="() => isSearchProductFocus = true" OnOpen="HanldeSearchProductsOnOpen" OnValueSelect="OnValueSelecthandler"></DropDownListEvents>
                                            <DropDownListFieldSettings Text="ProductName" Value="Id"></DropDownListFieldSettings>
                                        </SfDropDownList>
                                    </div>
                                </div>
                            </div>
                            <div class="my-3 sf-grid">
                                <SfGrid ID="ProductsGrid" @ref="ProductsGrid" AllowSelection="false" DataSource="ProductDataList" TValue="ProductData" AllowPaging="false" AllowTextWrap="false" Width="100%">
                                    <GridEditSettings AllowAdding="true"></GridEditSettings>
                                    <GridColumns>
                                        <GridColumn HeaderText="" TextAlign="TextAlign.Right" Width="50px">
                                            <Template Context="profileContext">
                                                @{
                                                    var product = (profileContext as ProductData);
                                                    <img class="img-fluid img-thumbnail me-2 text-align-left" width="50" alt="@product.ProductName" src="@product.ProductImage">
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Item" TextAlign="TextAlign.Left" Width="280px">
                                            <Template Context="profileContext">
                                                @{
                                                    var productData = (profileContext as ProductData);
                                                    <a href="javascript:void();" @onclick="() => ShowProductDetailModal(productData.ProductId, productData.ProductGuid, productData.FinalPrice)">@productData.ProductName</a>
                                                    <br />
                                                    <span class="fs--2 text-500 me-2">SKU : @productData.ProductSku</span>
                                                    if (productData.ProductType == (int)ProductTypeEnum.GiftCard)
                                                    {
                                                        <span class="fs--2 text-500">ID : @productData.AccountNumber</span>
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="180px">
                                            <Template Context="profileContext">
                                                @{
                                                    var product = (profileContext as ProductData);
                                                    <div class="border-1 d-flex justify-content-end">
                                                        @if (product.ProductType != (int)ProductTypeEnum.GiftCard)
                                                        {
                                                            <a class="btn btn-sm btn-outline-dark" href="javascript:void(0)" @onclick="() => ShowRemoveProductModal(product.ProductId)">-</a>
                                                            <div class="w-25 text-center"><span>@product.Quantity</span></div>
                                                            <a class="btn btn-sm btn-outline-dark me-3" href="javascript:void(0)" @onclick="() => IncreaseProductQty(product)">+</a>
                                                        }
                                                        <a class="btn btn-sm btn-outline-danger" href="javascript:void(0)" @onclick="() => RemoveProduct(product)"><span class="far fa-trash-alt" fa></span></a>
                                                    </div>
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Price" TextAlign="TextAlign.Right" Width="80px">
                                            <Template Context="profileContext">
                                                @{
                                                    var productData = (profileContext as ProductData);
                                                    if (productData.FinalPrice >= productData.ProductPrice)
                                                    {
                                                        <a href="javascript:void(0)" @onclick="() => HandleProductDiscountsModal(productData)"><span class="text-600">@orderCurrencySymbol@productData.ProductPrice.ToString("n2")</span></a>
                                                    }
                                                    else
                                                    {
                                                        <a href="javascript:void(0)" @onclick="() => HandleProductDiscountsModal(productData)"><span class="text-600 text-decoration-line-through">@orderCurrencySymbol@productData.ProductPrice.ToString("n2")</span></a>
                                                        <br />
                                                        <span>@orderCurrencySymbol@productData.FinalPrice.ToString("n2")</span>
                                                    }
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Extended" TextAlign="TextAlign.Right" Width="90px">
                                            <Template Context="profileContext">
                                                @{
                                                    var extendedPrice = (profileContext as ProductData).Extended;
                                                    <span>@orderCurrencySymbol@extendedPrice.ToString("n2")</span>
                                                }
                                            </Template>
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                            <div class="d-flex justify-content-end">
                                <div class="me-n2">
                                    <table class="table table-borderless fs--1">
                                        <tbody>
                                            <tr>
                                                <td class="white-space-nowrap py-1 text-end">Subtotal:</td>
                                                <td class="py-1 text-end">
                                                    <span>@orderCurrencySymbol@order.SubTotal.ToString("n2")</span>
                                                </td>
                                            </tr>
                                            @{
                                                if (order.DeliveryMethod != OrderDeliveryMethod.Pickup)
                                                {
                                                    <tr>
                                                        <td class="white-space-nowrap py-1 text-end">
                                                            <a href="javascript:void();" @onclick="@ShowAdjustShippingModal">Shipping:</a>
                                                        </td>
                                                        <td class="py-1 text-end">
                                                            <span>@orderCurrencySymbol@order.TotalShipping.ToString("n2")</span>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            <tr>
                                                <td class="white-space-nowrap py-1 text-end">
                                                    <a href="javascript:void();" @onclick="@ShowOrderDiscountModal">Discounts:</a>
                                                </td>
                                                <td class="py-1 text-end">
                                                    <span>@(order.TotalDiscounts.ToString("c2"))</span>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="white-space-nowrap py-1 text-end">
                                                    Sales Tax (@((isSalesTaxApplied) ? _defaultSalesTaxPercent : "0%")):
                                                    @{
                                                        if (isSalesTaxApplied)
                                                        {
                                                            @*<a class="ms-2" href="javascript:void();" @onclick="@ShowChargeSalesTaxModal">
                                                                <span class="fa-regular fa-trash-alt"></span>
                                                                </a>*@
                                                        }
                                                        else
                                                        {
                                                            <a class="ms-2" href="javascript:void();" @onclick="@ShowChargeSalesTaxModal">
                                                                <span class="fa-regular fa-plus"></span>
                                                            </a>
                                                        }
                                                    }

                                                </td>
                                                <td class="py-1 text-end">
                                                    <span>@orderCurrencySymbol@salesTax.ToString("n2")</span>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="white-space-nowrap py-1 text-end">
                                                    <a href="javascript:void();" @onclick="@ShowAdjustGratuityModal">Gratuity:</a>
                                                </td>
                                                <td class="py-1 text-end">
                                                    <span>@orderCurrencySymbol@order.TotalGratuity.ToString("n2")</span>
                                                </td>
                                            </tr>
                                            <tr class="border-top-2 border-secondary">
                                                <td class="white-space-nowrap fs-1 pt-1 text-uppercase text-end"><h5>Total:</h5></td>
                                                <td class="fs-1 pt-1 text-end">
                                                    <h5>@orderCurrencySymbol@(order.GrandTotal.ToString("n2"))</h5>
                                                </td>
                                            </tr>
                                            @{
                                                if (order.OrderTenders.Any())
                                                {
                                                    <tr>
                                                        <td class="white-space-nowrap fs-1 pt-1 text-uppercase text-end">
                                                            <h5><a href="javascript:void(0)" @onclick="() => IsTransactionLogDialogVisible = true">Amount Tendered:</a></h5>
                                                        </td>
                                                        <td class="fs-1 pt-1 text-end">
                                                            <h5><span class="text-info">@orderCurrencySymbol@(order.OrderTenders.Sum(x => x.Amount).ToString("n2"))</span></h5>
                                                        </td>
                                                    </tr>
                                                }
                                                <tr>
                                                    <td class="white-space-nowrap fs-1 pt-1 text-uppercase text-end"><h5>Balance Due:</h5></td>
                                                    <td class="fs-1 pt-1 text-end">
                                                        <h5>@orderCurrencySymbol@(balanceDue.ToString("n2"))</h5>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        }
                    </div>
                    <div class="col-12 col-md-3">
                        <div class="card shadow-none border mb-2">
                            <div class="card-body text-center">
                                <div class="d-grid gap-2">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="@ShowFullfillmentTypeModal">@(EnumHelper.GetDescription(order.DeliveryMethod))</button>
                                </div>

                                @if (order.DeliveryMethod != OrderDeliveryMethod.Pickup)
                                {
                                    var locationName = "";
                                    var deliveryInfo = "";
                                    switch (order.DeliveryMethod)
                                    {
                                        case (OrderDeliveryMethod.Ship):
                                            locationName = inventoryLocations.FirstOrDefault(x => x.BusinessLocationId == omsSetting.InventoryShipLocation)?.LocationName;
                                            deliveryInfo = "SHIPS";
                                            break;
                                        case (OrderDeliveryMethod.Delivery):
                                            locationName = inventoryLocations.FirstOrDefault(x => x.BusinessLocationId == omsSetting.InventoryDeliveryLocation)?.LocationName;
                                            deliveryInfo = EnumHelper.GetDescription(OrderDeliveryMethod.Delivery);
                                            break;
                                        case (OrderDeliveryMethod.CarryOut):
                                            locationName = inventoryLocations.FirstOrDefault(x => x.BusinessLocationId == omsSetting.InventoryCarryOutLocation)?.LocationName;
                                            deliveryInfo = EnumHelper.GetDescription(OrderDeliveryMethod.CarryOut);
                                            break;
                                    }
                                    if (!string.IsNullOrWhiteSpace(locationName))
                                    {
                                        <p class="text-wrap text-uppercase fs--1 my-2">@deliveryInfo FROM <span class="d-block">@locationName</span></p>
                                    }
                                    <a class="text-wrap text-uppercase fs--1" href="javascript:void(0)" @onclick="ShowReqShipDateModal">@deliveryInfo ON @shipmentDate.ToString("MM/d/yyyy", CultureInfo.InvariantCulture)</a>
                                }
                            </div>
                        </div>
                        <div class="card shadow-none border mb-2">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="salesReps">Sales Reps <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="@ShowSalesRepsModal"><span class="fas fa-plus"></span></button></label>
                                    @if (bindedSalesReps.Any())
                                    {
                                        List<string> salesRepsNames = new List<string>();
                                        foreach (var rep in bindedSalesReps)
                                        {
                                            var salesRep = salesRepresentatives.Where(x => x.UserId == rep).FirstOrDefault();
                                            if (salesRep != null)
                                            {
                                                salesRepsNames.Add(salesRep.FirstName + " " + salesRep.LastName);
                                            }
                                        }
                                        <p class="text-wrap">@Helper.GetCommaSeparatedStringFromList(salesRepsNames)</p>
                                    }
                                </div>
                                <hr class="mt-4 mb-3" />
                                <div class="mb-3">
                                    <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="orderTags">Order Tags <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="@ShowTagsModal"><span class="fas fa-plus"></span></button></label>
                                    @{
                                        if (bindedTags.Any())
                                        {
                                            <p class="text-wrap">@string.Join(", ", bindedTags)</p>
                                        }
                                    }
                                </div>
                                <hr class="mt-4 mb-3" />
                                <div class="mb-3">
                                    <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">Customer Notes <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShowDefault(OrderNote.Customer)"><span class="fas fa-plus"></span></button></label>
                                    @{
                                        if (orderNotes.Count > 0)
                                        {
                                            var customerNotes = orderNotes.Where(x => x.NoteType == (int)OrderNote.Customer).ToList();
                                            if (customerNotes.Count > 0)
                                            {
                                                foreach (var customerNote in customerNotes)
                                                {
                                                    <p class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">
                                                        @customerNote.Note
                                                        <span class="d-flex flex-between-center">
                                                            <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => DisplayNoteDeleteConfirmation(customerNote.IdGUID)"><span class="far fa-trash-alt"></span></button>
                                                            <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShow(customerNote.IdGUID)"><span class="fas fa-pencil-alt"></span></button>
                                                        </span>
                                                    </p>
                                                }
                                            }
                                        }
                                    }
                                </div>
                                @{
                                    if (order.DeliveryMethod == OrderDeliveryMethod.Ship)
                                    {
                                        <hr class="mt-4 mb-3" />
                                        <div class="mb-3">
                                            <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">Shipping Notes <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShowDefault(OrderNote.Shipping)"><span class="fas fa-plus"></span></button></label>
                                            @{
                                                if (orderNotes.Count > 0)
                                                {
                                                    var shippingNotes = orderNotes.Where(x => x.NoteType == (int)OrderNote.Shipping).ToList();
                                                    if (shippingNotes.Count > 0)
                                                    {
                                                        foreach (var shippingNote in shippingNotes)
                                                        {
                                                            <p class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">
                                                                @shippingNote.Note
                                                                <span class="d-flex flex-between-center">
                                                                    <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => DisplayNoteDeleteConfirmation(shippingNote.IdGUID)"><span class="far fa-trash-alt"></span></button>
                                                                    <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShow(shippingNote.IdGUID)"><span class="fas fa-pencil-alt"></span></button>
                                                                </span>
                                                            </p>
                                                        }
                                                    }
                                                }
                                            }
                                        </div>
                                    }
                                }
                                <hr class="mt-4 mb-3" />
                                <div class="mb-2">
                                    <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">Gift Notes <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShowDefault(OrderNote.Gift)"><span class="fas fa-plus"></span></button></label>
                                    @{
                                        if (orderNotes.Count > 0)
                                        {
                                            var giftNotes = orderNotes.Where(x => x.NoteType == (int)OrderNote.Gift).ToList();
                                            if (giftNotes.Count > 0)
                                            {
                                                foreach (var giftNote in giftNotes)
                                                {
                                                    <p class="form-label btn-reveal-trigger d-flex flex-between-center" for="selItemType">
                                                        @giftNote.Note
                                                        <span class="d-flex flex-between-center">
                                                            <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => DisplayNoteDeleteConfirmation(giftNote.IdGUID)"><span class="far fa-trash-alt"></span></button>
                                                            <button class=" btn btn-link btn-sm btn-reveal text-600" @onclick="() => ModalNoteShow(giftNote.IdGUID)"><span class="fas fa-pencil-alt"></span></button>
                                                        </span>
                                                    </p>
                                                }
                                            }
                                        }
                                    }
                                </div>
                                <hr class="mt-4 mb-3" />
                                <div class="mb-3">
                                    <label class="form-label btn-reveal-trigger d-flex flex-between-center" for="orderTags">Promo Codes <button class="btn btn-link btn-sm btn-reveal text-600" @onclick="@ShowPromoModal"><span class="fas fa-plus"></span></button></label>
                                    @if (order.OrderDiscount != null && order.OrderDiscount.Any())
                                    {
                                        <div class="d-flex justify-content-start">
                                            @{
                                                foreach (var promoCode in order.OrderDiscount)
                                                {
                                                    <span class="badge bg-secondary me-2">@promoCode.Code<a href="javascript:void(0)" @onclick="() => RemovePromoCode(promoCode)" class="text-white ms-2"><span class="fa-solid fa-x fa-xs"></span></a></span>
                                                }
                                            }
                                        </div>
                                    }

                                </div>
                            </div>
                            @{
                                if (ProductDataList.Any())
                                {
                                    <div class="card shadow-none border">
                                        <div class="card-body">
                                            @{
                                                if (balanceDue > 0)
                                                {
                                                    <div class="d-grid gap-2 mb-2">
                                                        <button class="btn btn-sm btn-outline-primary" @onclick="@ShowApplyTenderModal">Add Tender</button>
                                                    </div>
                                                }
                                                <div class="d-grid gap-2">
                                                    <button id="submitOrderBtn" class="btn btn-sm p-2 @((balanceDue > 0 || ( order.DeliveryMethod == OrderDeliveryMethod.Ship && !IsShipToAddressAdded() )|| submittedOrderNum > 0)?"btn-outline-secondary":"btn-primary") @(submittedOrderNum > 0 ? "disabled" :"")" @onclick="@SubmitOrder">Submit Order</button>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <SfDialog Width="500px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@NoteModalVisible">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    @noteHeader
                </Header>
                <Content>
                    <div class="mb-3">
                        <SfTextBox Multiline="true" placeholder="Enter the note" maxlength="@_noteCharLimit" class="form-control" @bind-Value="@note.Note" @onchange="HandleNoteInput" id="textCustomerNote" rows="4"></SfTextBox>
                        <p class="@(noteCharRemaining > 0 ? "text-success": "text-danger")">(@noteCharRemaining Remaining)</p>
                    </div>
                    @if (!(orderId <= 0 && note.NoteType == (int)OrderNote.Customer))
                    {
                        <div class="mb-3">
                            <label class="form-label" for="inputNotifyUsers">Notify</label>
                            <SfMultiSelect TValue="int[]" @bind-value="@bindedNotifyTeamMembers" TItem="SalesRepresentative" Mode="VisualMode.Box" DataSource="@salesRepresentatives" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering="true">
                                <MultiSelectFieldSettings Text="Name" Value="UserId"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                    }
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Save" IsPrimary="true" OnClick="@ModalNoteSave" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="500px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsTagsDialogVisible">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    Order Tags
                </Header>
                <Content>
                    <div class="row">
                        <div class="mb-3 col-10">
                            <SfMultiSelect Placeholder="Select" TValue="string[]" @bind-Value="orderTags" HtmlAttributes="@(new Dictionary<string,object>() { { "maxLength", "100" } })" TItem="CustomTagModel" AllowCustomValue="true" DataSource="@tags" AllowFiltering="true" Mode="@VisualMode.Box">
                                <MultiSelectFieldSettings Text="Value" Value="Value"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                        <div class="col-2 p-0">
                            <a href="javascript:void(0)" class="btn btn-sm btn-primary" @onclick="@SaveTags" type="button">Save</a>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="500px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsSalesRepsModalVisible">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    Sales Reps
                </Header>
                <Content>
                    <div class="row">
                        <div class="mb-3 col-10">
                            <SfMultiSelect TValue="int[]" @bind-Value="@salesReps" TItem="SalesRepresentative" Mode="VisualMode.Box" DataSource="@salesRepresentatives" FilterType="Syncfusion.Blazor.DropDowns.FilterType.Contains" AllowFiltering="true">
                                <MultiSelectFieldSettings Text="Name" Value="UserId"></MultiSelectFieldSettings>
                            </SfMultiSelect>
                        </div>
                        <div class="col-2 p-0">
                            <a href="javascript:void(0)" class="btn btn-sm btn-primary" @onclick="@SaveSalesRepresentatives" type="button">Save</a>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="500px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsReqShipDateModalVisible">
            <DialogEvents OnOverlayClick="() => IsReqShipDateModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    Requested Ship Date
                </Header>
                <Content>
                    <div class="row">
                        <div class="col-10 mb-3">
                            <SfDatePicker TValue="DateTime" @bind-Value="@reqShipmentDate" Min="@DateTime.Today" Format="MM/dd/yyyy"></SfDatePicker>
                        </div>
                        <div class="col-2 p-0">
                            <a href="javascript:void(0)" class="btn btn-sm btn-primary" @onclick="@SaveReqShipDate" type="button">Save</a>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" @bind-Visible="@IsRemoveProductModalVisible">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>Remove Product</Header>
                <Content>
                    <p class="mb-3">You have selected to remove @removeProduct.ProductName.</p>
                    <p class="mb-3">Would you like to proceed?</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="@CloseRemoveProductModal" />
                <DialogButton Content="Save" OnClick="() => ReduceProductQty(false)" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>



        @*<SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsChargeCreditCardModalVisible">
            <DialogEvents Closed="CloseChargeCreditCardModal" OnOverlayClick="CloseChargeCreditCardModal">
            </DialogEvents>
            <DialogTemplates>
                <Header>Charge Credit Card</Header>
                <Content>
                    <EditForm Model="creditCard" OnValidSubmit="SaveCreditCard">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label" for="inputCreditCardNumber">Credit Card Number</label>
                            <SfMaskedTextBox ID="inputVendorPhone" Mask="@_defaultCreditCardMask" PromptChar="@promptCharacter" @bind-Value="@creditCard.CreditCardNumber" CssClass="form-control form-control-sm" Placeholder="Card Number"></SfMaskedTextBox>
                            <ValidationMessage For="() => creditCard.CreditCardNumber" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label" for="inputCardholderName">Cardholder Name</label>
                            <InputText @bind-Value="@creditCard.CardHolderName" placeholder="Cardholder Name" class="form-control" id="inputCardholderName" />
                            <ValidationMessage For="() => creditCard.CardHolderName" />
                        </div>
                        <div class="row">
                            <div class="col-sm-6 mb-3">
                                <label class="form-label">Expiration Date</label>
                                <InputText @bind-Value="@creditCard.ExpirationMonth" class="form-control" id="inputMonth" placeholder="Month" />
                                <ValidationMessage For="() => creditCard.ExpirationMonth" />
                            </div>
                            <div class="col-sm-6 mb-3">
                                <label class="form-label"></label>
                                <br />
                                <InputText @bind-Value="@creditCard.ExpirationYear" class="form-control mt-2" id="inputYear" placeholder="Year" />
                                <ValidationMessage For="() => creditCard.ExpirationYear" />
                            </div>
                            <div class="col-sm-6 mb-3">
                                <label class="form-label">CVV</label>
                                <br />
                                <InputText @bind-Value="@creditCard.CVV" class="form-control mt-2" id="inputCVV" placeholder="CVV" />
                                <ValidationMessage For="() => creditCard.CVV" />
                            </div>
                        </div>
                        <div class="row">
                            @{
                                if (customerSelected)
                                {
                                    <div class="col-sm-6 mb-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input mt-1" type="checkbox" id="switchSaveCardonFile" @bind-value="@creditCard.SaveCardOnFile" checked="@creditCard.SaveCardOnFile">
                                            <label class="form-check-label" for="switchSaveCardonFile">Save Card on File</label>
                                        </div>
                                    </div>
                                    <div class="col-sm-6 mb-3">
                                        <div class="form-check form-switch">
                                            <input class="form-check-input mt-1" type="checkbox" id="switchSaveasDefault" @bind-value="@creditCard.SaveAsDefault" checked="@creditCard.SaveAsDefault">
                                            <label class="form-check-label" for="switchSaveasDefault">Save as Default</label>
                                        </div>
                                    </div>
                                }
                            }

                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" @onclick="CloseChargeCreditCardModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Add Credit Card</button>
                        </div>
                    </EditForm>
                </Content>
            </DialogTemplates>
        </SfDialog>*@



        <SfDialog IsModal="true" Width="650px" CssClass="sf-dialog-header-95" ShowCloseIcon="true" @bind-Visible="IsCreateCustomerDialogVisible">
            <DialogEvents Closed="@CloseCreateCustomerModal"></DialogEvents>
            <DialogTemplates>
                <Header>
                    <h5 class="modal-title" id="modalLabel">@(isAddAddress ? "Add New Address": "Update Adress")</h5>
                </Header>
                <Content>
                    <EditForm OnValidSubmit="@HandleAddressSubmit" Model="@addressRequestModel" Context="addressFormContext">
                        <DataAnnotationsValidator />
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <InputText type="text" class="form-control" Value="@addressRequestModel.Email" ValueChanged="ValidateUser" ValueExpression="() => addressRequestModel.Email" id="inputCompany" placeholder="Email" />
                            <ValidationMessage For="@(() => addressRequestModel.Email)" />
                        </div>
                        <div class="row gx-2">
                            <div class="col-sm-6 mb-3">
                                <label class="form-label" for="inputFirstName">First Name</label>
                                <InputText id="inputFirstName" class="form-control" @bind-Value="@addressRequestModel.FirstName" placeholder="First Name" />
                                <ValidationMessage For="@(() => addressRequestModel.FirstName)" />
                            </div>
                            <div class="col-sm-6 mb-3">
                                <label class="form-label" for="inputLastName">Last Name</label>
                                <InputText id="inputLastName" class="form-control" @bind-Value="@addressRequestModel.LastName" placeholder="Last Name" />
                                <ValidationMessage For="@(() => addressRequestModel.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Company</label>
                            <input type="text" class="form-control" @bind-value="@addressRequestModel.Company" id="inputCompany" placeholder="Company" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Date of Birth</label>
                            <SfDatePicker TValue="DateTime?" Placeholder='Date of Birth' AllowEdit="false" Format="MM/dd/yyyy" @bind-Value="@addressRequestModel.DOB"></SfDatePicker>
                        </div>
                        <div class="mb-3">
                            <AddressControl countries="@countries" states="@states" @bind-address1="@addressRequestModel.Address1" @bind-address2="@addressRequestModel.Address2" @bind-selectedCountry="@addressRequestModel.CountryCode" @bind-stateCode="@addressRequestModel.StateCode" @bind-city="@addressRequestModel.City" @bind-zipCode="@addressRequestModel.ZipCode" />
                        </div>
                        @{
                            if (showPhoneControl)
                            {
                                <div class="mb-3">
                                    <PhoneNumber countries="@countries" OnPhoneCountryChanged="(args) => { addressRequestModel.PhoneCountry = args?.ToString(); }" phoneMasks="@phoneMasks" phoneCountry="@addressRequestModel.PhoneCountry" @bind-phone="@addressRequestModel.Phone" label="@(!string.IsNullOrEmpty(addressRequestModel.PhoneType)?addressRequestModel.PhoneType.ToTitleCase(): "Phone")" />
                                </div>
                                @*<div class="mb-3">
                                        <PhoneNumber countries="@countries" phoneMasks="@phoneMasks" phoneCountry="@addressRequestModel.AddressPhoneCountry" @bind-phone="@addressRequestModel.AddressPhone" label="Home Phone" />
                                    </div>
                                    <div class="mb-3">
                                        <PhoneNumber countries="@countries" phoneMasks="@phoneMasks" phoneCountry="@addressRequestModel.WorkPhoneCountry" @bind-phone="@addressRequestModel.WorkPhone" label="Work Phone" />
                                    </div>*@
                            }
                        }

                        <div class="mb-3">
                            <div>
                                <SfCheckBox Label="Set as Default Billing Address" @bind-Checked="@addressRequestModel.IsDefaultBilling"></SfCheckBox>
                            </div>
                        </div>
                        <div class="mb-3">
                            <div>
                                <SfCheckBox Label="Set as Default Shipping Address" @bind-Checked="@addressRequestModel.IsDefaultShipping"></SfCheckBox>
                            </div>
                        </div>

                        <hr />
                        <div class="float-end pb-3">
                            <button type="button" class="btn btn-secondary" @onclick="@CloseCreateCustomerModal">Cancel</button>
                            <button type="submit" class="btn btn-primary">Save</button>
                        </div>
                    </EditForm>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="750px" IsModal="true" @bind-Visible="@IsProductDetailModalVisible" CssClass="productDetail">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    <div class="container">
                        <div class="row">
                            <div class="col-8 p-0">
                                <h5 class="modal-title" id="staticBackdropLabel">Details</h5>
                            </div>
                            <div class="col-2">
                                @{
                                    if (order.OrderStatus != OrderStatus.ShoppingCart)
                                    {
                                        <button class="btn btn-sm btn-primary" type="button" @onclick="() => order.OrderStatus = OrderStatus.ShoppingCart">Add to Cart</button>
                                    }
                                }
                            </div>
                            <div class="col-2">
                                <button type="button" id="productDetailClose" class="btn-close m-0" @onclick="@CloseProductDetailModal" aria-label="Close"></button>
                            </div>
                        </div>
                    </div>
                </Header>
                <Content>
                    <div class="row mb-1">
                        <div class="col-md-2">
                            <img src="@productDetails.ProductImageURL" alt="@productDetails.ProductTitle" width="90">
                        </div>
                        <div class="col-md-10">
                            <p class="fw-bold">@productDetails.ProductTitle</p>
                            <p>@productDetails.ProductTeaser</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Retail Price</label>
                            <p class="fw-bold mb-1">@orderCurrencySymbol@productDetails.RetailPrice.ToString("n2")*</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Sale Price</label>
                            <p class="fw-bold mb-1">@orderCurrencySymbol@productDetails.SalePrice.ToString("n2")*</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Cost</label>
                            <p class="fw-bold mb-1">@orderCurrencySymbol@productDetails.CostPrice.ToString("n2")</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Club Price</label>
                            <p class="fw-bold mb-1">@orderCurrencySymbol@productDetails.ClubPrice.ToString("n2")</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">SKU</label>
                            <p class="fw-bold mb-1">@productDetails.ProductSku</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Charge Tax</label>
                            <p class="fw-bold mb-1">@((productDetails.ChargeSalesTax) ? "Yes" : "No")</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Item Category</label>
                            @{
                                string productTypeName = "";
                                var productType = productTypes.Where(x => x.Id == productDetails.ProductType).FirstOrDefault();
                                if (productType != null)
                                {
                                    productTypeName = productType.TypeName;
                                }
                            }
                            <p class="fw-bold mb-1">@productTypeName</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Unit Type</label>
                            @{
                                string volumeUnit = "";
                                if (!string.IsNullOrWhiteSpace(productDetails.VolumeUnit))
                                {
                                    UnitType enumValue = (UnitType)Convert.ToInt32(productDetails.VolumeUnit);
                                    volumeUnit = enumValue.ToString();
                                }
                            }
                            <p class="fw-bold mb-1">Per @volumeUnit</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-12">
                            <label class="form-label fs--0 mb-1">Collections</label>
                            <p class="fw-bold mb-1 fs-1">
                                @{
                                    if (productDetails.Collections != null)
                                    {
                                        foreach (var collection in productDetails.Collections)
                                        {
                                            <span class="badge bg-secondary me-1">@collection</span>
                                        }
                                    }
                                }
                            </p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Item Weight</label>
                            @{
                                string weightUnit = "";
                                if (!string.IsNullOrWhiteSpace(productDetails.WeightUnit))
                                {
                                    int wtUnit;

                                    bool success = int.TryParse(productDetails.WeightUnit, out wtUnit);
                                    if (success)
                                    {
                                        weightUnit = ((WeightUnit)wtUnit).ToString();
                                    }
                                    else
                                    {
                                        weightUnit = productDetails.WeightUnit;
                                    }
                                }
                            }
                            <p class="fw-bold mb-1">@productDetails.WeightValue @weightUnit</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1"></label>
                            <br />
                            <p class="fw-bold mb-1">@($"{productDetails.DimensionsLength} x {productDetails.DimensionsWidth} x {productDetails.DimensionsHeight}")</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Requires Shipping</label>
                            <p class="fw-bold mb-1">@((productDetails.RequiresShipping == 1)?"Yes":"No")</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Volume</label>
                            <p class="fw-bold mb-1">@productDetails.VolumeValue</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">In-Stock Quantity</label>
                            <p class="fw-bold mb-1">0</p>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Inventory Mode</label>
                            <p class="fw-bold mb-1">@((productDetails.TrackInventory)?"Track Inventory": "Do Not Track")</p>
                        </div>
                    </div>
                    <hr class="mt-0" />
                    <div class="row">
                        <div class="col-md-6">
                            <label class="form-label fs--0 mb-1">Variants</label>
                            <br />
                            @{
                                if (productDetails.Variants != null)
                                {
                                    foreach (var variant in productDetails.Variants)
                                    {
                                        <a href="javascript:void(0)" @onclick="() => ChangeProductDetails(variant.VariantProductId)" class="fw-bold mb-1">@variant.VariantName</a>
                                        <br>
                                    }
                                }
                            }
                        </div>
                    </div>
                    <hr class="mt-0" />
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog IsModal="true" ShowCloseIcon="true" CssClass="syncfusion-dialog-size syncfusion-dialog-size-md" @bind-Visible="AddressModalVisibility">
            <DialogTemplates>
                <Header>
                    <h5>Addresses on File</h5>
                </Header>
                <Content>
                    @{
                        var defaultBillingAddress = customerAddresses.Where(x => x.IsDefaultBilling && x.Active).FirstOrDefault();
                        var defaultShippingAddress = customerAddresses.Where(x => x.IsDefaultShipping && x.Active).FirstOrDefault();
                        var otherAddresses = customerAddresses.Where(x => !x.IsDefaultBilling && !x.IsDefaultShipping).ToList();
                    }
                    <div class="row">
                        @{
                            if (defaultBillingAddress != null)
                            {
                                <div class="col-sm-6">
                                    <h6 class="fw-bold">Default Billing Address</h6>
                                    <div class="card shadow-none border h-100">
                                        <div class="card-body">
                                            <button class="btn btn-link  float-end mt-n2" @onclick="() => EditAddress(defaultBillingAddress.AddresGuid)"><span class="fas fa-pencil fs--1"></span></button>
                                            <p class="text-start">
                                                @defaultBillingAddress.FirstName @defaultBillingAddress.LastName
                                                <br>
                                                @defaultBillingAddress.Address1
                                                <br>
                                                @defaultBillingAddress.Address2
                                                <br>
                                                @defaultBillingAddress.City, @defaultBillingAddress.StateCode, @defaultBillingAddress.ZipCode
                                                <br>
                                                @defaultBillingAddress.Country
                                                <br>
                                                <br>
                                                @defaultBillingAddress.PhoneFormatted
                                            </p>
                                            @{
                                                if (defaultBillingAddress.AddresGuid != billingAddresGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ChangeBillingAddress(defaultBillingAddress.AddresGuid)">Use for Billing</button>
                                                }
                                                if (defaultBillingAddress.AddresGuid != shippingAddressGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ChangeShippingAddress(defaultBillingAddress.AddresGuid)">Use for Shipping</button>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                        @{
                            if (defaultShippingAddress != null)
                            {
                                <div class="col-sm-6">
                                    <h6 class="fw-bold">Default Shipping Address</h6>
                                    <div class="card shadow-none border h-100">
                                        <div class="card-body">
                                            <button class="btn btn-link  float-end mt-n2" @onclick="() => EditAddress(defaultShippingAddress.AddresGuid)"><span class="fas fa-pencil fs--1"></span></button>
                                            <p class="text-start">
                                                @defaultShippingAddress.FirstName @defaultShippingAddress.LastName
                                                <br>
                                                @defaultShippingAddress.Address1
                                                <br>
                                                @defaultShippingAddress.Address2
                                                <br>
                                                @defaultShippingAddress.City, @defaultShippingAddress.StateCode, @defaultShippingAddress.ZipCode
                                                <br>
                                                @defaultShippingAddress.Country
                                                <br>
                                                <br>
                                                @defaultShippingAddress.PhoneFormatted
                                            </p>
                                            @{
                                                if (defaultShippingAddress.AddresGuid != shippingAddressGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ChangeShippingAddress(defaultShippingAddress.AddresGuid)">Use for Shipping</button>
                                                }
                                                if (defaultShippingAddress.AddresGuid != billingAddresGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ChangeBillingAddress(defaultShippingAddress.AddresGuid)">Use for Billing</button>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }

                    </div>
                    <div class="row mt-5">
                        <h6 class="fw-bold" hidden="@(otherAddresses.Any()?false:true)">Other Addresses</h6>
                        @{
                            foreach (var otherAddress in otherAddresses)
                            {
                                <div class="col-sm-6 mb-3">
                                    <div class="card shadow-none border h-100">
                                        <div class="card-body">
                                            <button class="btn btn-link  float-end mt-n2" @onclick="() => EditAddress(otherAddress.AddresGuid)"><span class="fas fa-pencil fs--1"></span></button>
                                            <p class="text-start">
                                                @otherAddress.FirstName @otherAddress.LastName
                                                <br>
                                                @otherAddress.Address1
                                                <br>
                                                @otherAddress.Address2
                                                <br>
                                                @otherAddress.City, @otherAddress.StateCode, @otherAddress.ZipCode
                                                <br>
                                                @otherAddress.Country
                                                <br>
                                                <br>
                                                @otherAddress.PhoneFormatted
                                            </p>
                                            @{
                                                if (otherAddress.AddresGuid != billingAddresGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary me-2" @onclick="() => ChangeBillingAddress(otherAddress.AddresGuid)">Use for Billing</button>
                                                }
                                                if (otherAddress.AddresGuid != shippingAddressGUID)
                                                {
                                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ChangeShippingAddress(otherAddress.AddresGuid)">Use for Shipping</button>
                                                }
                                            }
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </Content>
                <FooterTemplate>
                    <button type="button" class="btn btn-primary float-start" @onclick="@AddNewAddress">Add New</button>
                    <button type="button" class="btn btn-secondary" @onclick="@CloseAddressModal">Close</button>
                </FooterTemplate>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsFullfillmentTypeModalVisible" CssClass="fulfillmentType">
            <DialogEvents OnOverlayClick="() => IsFullfillmentTypeModalVisible = false"></DialogEvents>
            <DialogTemplates>
                <Header>Fulfillment Type</Header>
                <Content>
                    <div class="row border-bottom text-center">
                        <div class="col-md-12">
                            <p class="fw-bold my-3">
                                <a href="javascript:void(0)" @onclick="() => ChangeOrderDeliveryType(OrderDeliveryMethod.Ship)">Ship To Customer</a>
                            </p>
                        </div>
                    </div>
                    <div class="row border-bottom text-center">
                        <div class="col-md-12">
                            <p class="fw-bold my-3">
                                <a href="javascript:void(0)" @onclick="() => ChangeOrderDeliveryType(OrderDeliveryMethod.CarryOut)">Carry Out</a>
                            </p>
                        </div>
                    </div>
                    <div class="row border-bottom text-center">
                        <div class="col-md-12">
                            <p class="fw-bold my-3">
                                <a href="javascript:void(0)" @onclick="() => ChangeOrderDeliveryType(OrderDeliveryMethod.Pickup)">Customer Pickup</a>
                            </p>
                        </div>
                    </div>
                    <div class="row border-bottom text-center">
                        <div class="col-md-12">
                            <p class="fw-bold my-3">
                                <a href="javascript:void(0)" @onclick="() => ChangeOrderDeliveryType(OrderDeliveryMethod.Delivery)">Delivery Order</a>
                            </p>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsChargeSalesTaxModalVisible">
            <DialogEvents OnOverlayClick="() => IsChargeSalesTaxModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Charge Sales Tax?</Header>
                <Content>
                    <p class="mb-3">@((isSalesTaxApplied)? "You have selected to set this order as non-taxable.": "You have selected to charge applicable sales tax on this order.")</p>
                    <p class="mb-3">Are you sure?</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="@CloseChargeSalesTaxModal" />
                @{
                    if (isSalesTaxApplied)
                    {
                        <DialogButton Content="Proceed" OnClick="RemoveSalesTax" IsPrimary="true" />
                    }
                    else
                    {
                        <DialogButton Content="Proceed" OnClick="ApplySalesTax" IsPrimary="true" />
                    }
                }

            </DialogButtons>
        </SfDialog>

        <SfDialog Width="500px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsAdjustGratuityModalVisible">
            <DialogEvents OnOverlayClick="() => IsAdjustGratuityModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Adjust Gratuity</Header>
                <Content>
                    <div class="row">
                        <div class="mb-3 col-10">
                            <SfNumericTextBox TValue="decimal" ValidateDecimalOnType="true" Format="c2" Decimals=2 ShowSpinButton="false" @bind-Value=@bindedGratuity Min="0"></SfNumericTextBox>
                        </div>
                        <div class="col-2 p-0">
                            <a href="javascript:void(0)" class="btn btn-sm btn-primary" @onclick="@SaveOrderGratuity" type="button">Save</a>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsSendCartToCustomer">
            <DialogEvents OnOverlayClick="@OnOverlayclick">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    Share Cart with Customer
                    <br />
                    <span class="mt-2 fs--1">@((order.BillToCustomer != null)?order.BillToCustomer.Email: "")</span>
                </Header>
                <Content>
                    <div class="mb-3">
                        <p>You have selected to resend the confirmation email.</p>
                    </div>
                    <div class="mb-3">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" checked="@SendToAlternativeEmail" @bind-value="@SendToAlternativeEmail">
                            <label class="form-check-label" for="">
                                Send to Alternative Email Address
                            </label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <input disabled="@(!SendToAlternativeEmail)" class="form-control" type="text" placeholder="Enter email address" />
                    </div>
                    <div class="mb-3">
                        <label class="form-label">Customer Note</label>
                        <textarea class="form-control" @bind="customerNotes" @bind:event="oninput" maxlength="@MAXCustomerNotesCount" rows="3" placeholder="Enter the note" />
                        <label class="@((MAXCustomerNotesCount - customerNotes.Count()) > 0 ? "text-success": "text-danger")">(@(MAXCustomerNotesCount - customerNotes.Count()) Remaining)</label>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="@CloseSendCartToCustomerModal" />
                <DialogButton Content="Save" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" @bind-Visible="@IsSuspendOrderConfirmationModalVisible">
            <DialogEvents OnOverlayClick="() => IsSuspendOrderConfirmationModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Suspend Order?</Header>
                <Content>
                    <p class="mb-3">You have selected to Suspend the order.</p>
                    <p class="mb-3">Are you sure?</p>

                    <label class="form-label mt-4" for="suspendOrderNotes">Order Notes(Optional)</label>
                    <SfTextBox Multiline="true" placeholder="Enter the note" class="form-control" maxlength="@_noteCharLimit" @bind-Value="@note.Note" @onchange="HandleNoteInput" id="suspendOrderNotes" rows="4"></SfTextBox>
                    <p class="@(noteCharRemaining > 0 ? "text-success": "text-danger")">(@noteCharRemaining Remaining)</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="() => IsSuspendOrderConfirmationModalVisible = false" />
                <DialogButton Content="Proceed" OnClick="@SuspendOrder" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="750px" Height="280px" ShowCloseIcon="hideOrderSubmitModal" IsModal="true" @bind-Visible="@IsOrderSubmissionStateModalVisible">
            @{
                if (submittedOrderNum > 0)
                {
                    <DialogTemplates>
                        <Header>Order Submitted</Header>
                        <Content>
                            @if (order.BillToCustomer != null && (!string.IsNullOrEmpty(order.BillToCustomer.FirstName) || !string.IsNullOrEmpty(order.BillToCustomer.LastName)))
                            {
                                <div class="row">
                                    <div class="col-6 p-0 text-end">
                                        <label>Customer</label>
                                    </div>
                                    <div class="col-6 text-start">
                                        <label>@customer.FirstName @customer.LastName</label>
                                    </div>
                                </div>
                            }
                            <div class="row">
                                <div class="col-6 p-0 text-end">
                                    <label>Order#</label>
                                </div>
                                <div class="col-6 text-start">
                                    <label>@submittedOrderPrefix-@submittedOrderNum</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6 p-0 text-end">
                                    <label>Total</label>
                                </div>
                                <div class="col-6 text-start">
                                    <label>@orderCurrencySymbol@order.GrandTotal.ToString("n2")</label>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-6 p-0 text-end">
                                    <label>Delivery Method</label>
                                </div>
                                <div class="col-6 text-start">
                                    <label>@EnumHelper.GetDescription(order.DeliveryMethod)</label>
                                </div>
                            </div>
                        </Content>
                    </DialogTemplates>
                    <DialogButtons>
                        <DialogButton Content="View Order" CssClass="btn btn-outline-primary" OnClick="ViewOrder" />
                        <DialogButton Content="New Order" CssClass="btn btn-primary" OnClick="@HandlePostSuspendedOrder" IsPrimary="true" />
                    </DialogButtons>
                }
                else
                {
                    <div class="row h-100">
                        <div class="col-12 mt-7 text-center">
                            <h5 class="text-center">Submitting Order</h5>
                            <div class="my-4 text-center">
                                <div class="spinner-border text-primary mb-2" role="status">
                                    <span class="visually-hidden">Loading...</span>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            }

        </SfDialog>

        <SfDialog Width="400px" IsModal="true" @bind-Visible="@IsRemoveCustomerConfirmationModalVisible">
            <DialogEvents OnOverlayClick="() => IsRemoveCustomerConfirmationModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Remove Customer?</Header>
                <Content>
                    <p class="mb-3">You have selected to remove the customer.</p>
                    <p class="mb-3">Are you sure?</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="() => IsRemoveCustomerConfirmationModalVisible = false" />
                <DialogButton Content="Proceed" OnClick="@RemoveCustomer" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="400px" IsModal="true" @bind-Visible="@IsClearOrderConfirmationModalVisible">
            <DialogEvents OnOverlayClick="() => IsClearOrderConfirmationModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Unsaved Order</Header>
                <Content>
                    <p class="mb-3">You are leaving an unsaved order, are you sure you would like to proceed?.</p>
                    <p class="mb-3">All unsaved changes will be lost.</p>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Clear Order" CssClass="e-danger" OnClick="ClearOrder" />
                <DialogButton Content="Suspend Order" OnClick="@ShowSuspendOrderModal" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="1000px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsSearchProductModalVisibile">
            <DialogEvents OnOverlayClick="() => IsSearchProductModalVisibile = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>@productsModalHeader</Header>
                <Content>
                    @if (productsSearch)
                    {
                        <EditForm Model="productSearch">
                            <div class="mb-3">
                                <label class="form-label" for="search-product">
                                    Search
                                </label>
                                <InputText class="form-control" id="search-product" @bind-Value="@productSearch" @oninput="SearchProducts" placeholder="search" />
                            </div>
                        </EditForm>
                    }

                    @{
                        if (products.Any())
                        {
                            <div>
                                <SfGrid DataSource="@products" @ref="SearchProductsGrid" TValue="ProductListModel" AllowPaging="true" Width="100%">
                                    <GridEvents RowSelected="RowSelectHandler" RowDeselected="RowDeselectHandler" TValue="ProductListModel"></GridEvents>
                                    <GridFilterSettings Mode="FilterBarMode.Immediate"></GridFilterSettings>
                                    <GridPageSettings PageSize="10"></GridPageSettings>
                                    <GridTemplates>
                                        <EmptyRecordTemplate>
                                            @if (!products.Any())
                                            {
                                                <div class="min-vh-75 font-weight-black fs-8 text-center my-4">
                                                    <h6>
                                                        <span class="fa-regular fa-exclamation-triangle me-2"></span>No Products
                                                    </h6>
                                                </div>
                                            }
                                        </EmptyRecordTemplate>
                                    </GridTemplates>
                                    <GridColumns>
                                        <GridColumn Type="Syncfusion.Blazor.Grids.ColumnType.CheckBox" TextAlign="TextAlign.Left" Width="40"></GridColumn>
                                        <GridColumn TextAlign="TextAlign.Left" Width="60px">
                                            <Template>
                                                @{
                                                    var product = (context as ProductListModel);
                                                    <img class="img-fluid img-thumbnail me-2 text-align-left" width="50" alt="@product.ProductTitle" src="@product.ProductImageURL">
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Product Name" TextAlign="TextAlign.Left" Width="250px">
                                            <Template>
                                                @{
                                                    var productName = (context as ProductListModel).ProductTitle;
                                                    @(productName)
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Sku" TextAlign="TextAlign.Left" Width="90px">
                                            <Template>
                                                @{
                                                    var productSku = (context as ProductListModel).ProductSku;
                                                    @(productSku)
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Type" TextAlign="TextAlign.Left" Width="120px">
                                            <Template>
                                                @{
                                                    var productType = (context as ProductListModel).ProductTypeName;
                                                    @(productType)
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Retail" TextAlign="TextAlign.Left" Width="60px">
                                            <Template>
                                                @{
                                                    var retailPrice = (context as ProductListModel).RetailPrice;
                                                    @($"{@orderCurrencySymbol}{retailPrice.ToString("n2")}")
                                                }
                                            </Template>
                                        </GridColumn>
                                        <GridColumn HeaderText="Sale" TextAlign="TextAlign.Left" Width="60px">
                                            <Template>
                                                @{
                                                    var salePrice = (context as ProductListModel).SalePrice;
                                                    @($"{@orderCurrencySymbol}{salePrice.ToString("n2")}")
                                                }
                                            </Template>
                                        </GridColumn>
                                    </GridColumns>
                                </SfGrid>
                            </div>
                        }
                    }
                </Content>
            </DialogTemplates>
            @{
                if (SearchProductsGrid != null && SearchProductsGrid.SelectedRecords.Count() > 0)
                {
                    <DialogButtons>
                        <DialogButton Content="Add to Order" OnClick="@AddSearchedProductsToCart" IsPrimary="true" />
                    </DialogButtons>
                }
            }
        </SfDialog>

        <SfDialog Width="750px" ShowCloseIcon="true" IsModal="true" ID="quick-charge-modal" @bind-Visible="@IsQuickChargeModalVisible">
            <DialogEvents OnOverlayClick="() => IsQuickChargeModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>Quick Charge</Header>
                <Content>
                    <div class="container">
                        <div class="row">
                            <label id="quick-charge-result">@orderCurrencySymbol@quickChargeVal.ToString("n2")</label>
                        </div>
                        @{
                            if (omsSetting.Id > 0 && omsSetting.QuickChargeEnabled)
                            {
                                <div class="row height-auto">
                                    <a href="javascript:void(0);" @onclick="() => AddQuickChargeItem(omsSetting.QuickChargeAmount1.Value)" class="col-4 quick-charge-border btn quick-charge-val">
                                        @orderCurrencySymbol@omsSetting.QuickChargeAmount1.Value.ToString("n2")
                                    </a>
                                    <a href="javascript:void(0);" @onclick="() => AddQuickChargeItem(omsSetting.QuickChargeAmount2.Value)" class="col-4 quick-charge-border btn quick-charge-val">
                                        @orderCurrencySymbol@omsSetting.QuickChargeAmount2.Value.ToString("n2")
                                    </a>
                                    <a href="javascript:void(0);" @onclick="() => AddQuickChargeItem(omsSetting.QuickChargeAmount3.Value)" class="col-4 quick-charge-border btn quick-charge-val">
                                        @orderCurrencySymbol@omsSetting.QuickChargeAmount3.Value.ToString("n2")
                                    </a>
                                </div>
                            }
                        }

                        <div class="row height-auto">
                            <div class="col-9">
                                <div class="row height-auto">
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.01)">
                                        1
                                    </a>
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.02)">
                                        2
                                    </a>
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.03)">
                                        3
                                    </a>
                                </div>
                                <div class="row height-auto">
                                    <div href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.04)">
                                        4
                                    </div>
                                    <div href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.05)">
                                        5
                                    </div>
                                    <div href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.06)">
                                        6
                                    </div>
                                </div>
                            </div>
                            <a class="col-3 quick-charge-border btn charge-action">&#8592;</a>
                        </div>
                        <div class="row height-auto">
                            <div class="col-9">
                                <div class="row height-auto">
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.07)">
                                        7
                                    </a>
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.08)">
                                        8
                                    </a>
                                    <a href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal += Convert.ToDecimal(0.09)">
                                        9
                                    </a>
                                </div>
                                <div class="row height-auto">
                                    <div href="javascript:void(0);" class="col-8 quick-charge-border btn charge-val" @onclick="() => quickChargeVal = quickChargeVal * 100">
                                        .00
                                    </div>
                                    <div href="javascript:void(0);" class="col-4 quick-charge-border btn charge-val" @onclick="() => quickChargeVal = quickChargeVal * 10">
                                        0
                                    </div>
                                </div>
                            </div>
                            <a id="quick-charge-add-btn" href="javascript:void(0);" @onclick="() => AddQuickChargeItem(quickChargeVal)" class="col-3 quick-charge-border btn @((quickChargeVal == 0)?"disabled":"") charge-action">
                                +
                            </a>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog CssClass="syncfusion-dialog-size syncfusion-dialog-size-sm" ShowCloseIcon="true" Width="800px" ID="transaction-log" IsModal="true" @bind-Visible="@IsTransactionLogDialogVisible">
            <DialogEvents OnOverlayClick="() => IsTransactionLogDialogVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    Transaction Log
                </Header>
                <Content>
                    @{
                        if (order.OrderTenders != null && order.OrderTenders.Any())
                        {
                            foreach (var tender in order.OrderTenders.Where(x => x.TenderType != TenderType.GiftCard).OrderByDescending(x => x.CreatedDate))
                            {
                                <div class="row">
                                    <div class="col-4 border text-center">
                                        <p class="mt-2">@EnumHelper.GetDescription(tender.TenderType)</p>
                                        @{
                                            var paymentDate = tender.CreatedDate;
                                            paymentDate = paymentDate.AddMinutes(offsetMinutes);
                                        }
                                        @(paymentDate.ToString("MMMM d, yyyy"))
                                        <br />
                                        @(paymentDate.ToString("hh:mm tt"))
                                    </div>
                                    @{
                                        if (tender.TenderType == TenderType.Cash)
                                        {
                                            <div class="col-8 border">
                                                <div class="row mt-2">
                                                    <div class="col-4 p-0 text-end">
                                                        <p class="successful-payments">@PaymentTransactionType.sale.ToString().ToUpper():</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@orderCurrencySymbol@((tender.Amount - tender.Change).ToString("n2"))</p>
                                                    </div>
                                                </div>
                                                <div class="row mt-2 mb-0">
                                                    <div class="col-4 p-0 text-end">
                                                        <p>Tendered:</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@orderCurrencySymbol@tender.Amount.ToString("n2")</p>
                                                    </div>
                                                </div>
                                                <div class="row mb-0">
                                                    <div class="col-4 p-0 text-end">
                                                        <p>Change:</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@orderCurrencySymbol@tender.Change.ToString("n2")</p>
                                                    </div>
                                                </div>
                                            </div>
                                        }
                                        else
                                        {
                                            if (tender.OrderTransactions != null && tender.OrderTransactions.Any())
                                            {
                                                foreach (var transaction in tender.OrderTransactions)
                                                {
                                                    <div class="col-8 border">
                                                        @{
                                                            <div class="row mt-2">
                                                                <div class="col-4 p-0 text-end">
                                                                    <p class="successful-payments">@transaction.TransactionType.ToString().ToUpper():</p>
                                                                </div>
                                                                <div class="col-8 text-start">
                                                                    <p>@orderCurrencySymbol@transaction.Amount.ToString("n2")</p>
                                                                </div>
                                                            </div>
                                                            <div class="row mt-2">
                                                                <div class="col-4 p-0 text-end">
                                                                    <p>Approval:</p>
                                                                </div>
                                                                <div class="col-8 text-start">
                                                                    <p>@transaction.GatewayApprovalCode</p>
                                                                </div>
                                                            </div>
                                                            <div class="row mt-2">
                                                                <div class="col-4 p-0 text-end">
                                                                    <p>Transaction:</p>
                                                                </div>
                                                                <div class="col-8 text-start">
                                                                    <p>@transaction.GatewayTransactionId</p>
                                                                </div>
                                                            </div>
                                                            <div class="row mt-2">
                                                                <div class="col-4 p-0 text-end">
                                                                    <p>Card:</p>
                                                                </div>
                                                                <div class="col-8 text-start">
                                                                    <p>@transaction.CreditCardType.ToString() - @transaction.CreditCardLastFour exp @transaction.CreditCardExpMonth/@transaction.CreditCardExpYear</p>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                }
                                            }
                                        }
                                    }
                                </div>
                            }

                            if (order.OrderGiftCard is not null)
                            {
                                foreach (var giftCard in order.OrderGiftCard)
                                {
                                    <div class="row">
                                        <div class="col-4 border text-center">
                                            <p class="mt-2">@EnumHelper.GetDescription(TenderType.GiftCard)</p>
                                        </div>
                                        <div class="col-8 border">
                                            @{
                                                <div class="row mt-2">
                                                    <div class="col-4 p-0 text-end">
                                                        <p>Amount Used:</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@orderCurrencySymbol@giftCard.AmountUsed.ToString("n2")</p>
                                                    </div>
                                                </div>
                                                <div class="row mt-2">
                                                    <div class="col-4 p-0 text-end">
                                                        <p>Available Balance:</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@orderCurrencySymbol@giftCard.Balance.ToString("n2")</p>
                                                    </div>
                                                </div>
                                                <div class="row mt-2">
                                                    <div class="col-4 p-0 text-end">
                                                        <p>Gift Card Number:</p>
                                                    </div>
                                                    <div class="col-8 text-start">
                                                        <p>@("XXXXXXXXXXXX"+giftCard.GiftCardLastFour)</p>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <hr />
                            <p>@("No Transaction history")</p>
                        }
                    }
                </Content>
            </DialogTemplates>
        </SfDialog>

        <div class="fixed-bottom">
            <div class="row">
                <div class="col-xl-2"></div>
                <div class="col-xl-10 bg-white">
                    <div class="btn-toolbar" role="toolbar" aria-label="POS Toolbar">
                        <div class="btn-group d-flex overflow-auto w-100 me-2" role="group" aria-label="Product button group">
                            <button type="button" @onclick="ShowSearchProductsModal" class="btn btn-lg btn-outline-primary"><span class="fa-regular fa-magnifying-glass"></span></button>
                            <button type="button" @onclick="ShowFavProductsModal" class="btn btn-lg btn-outline-primary"><span class="fa-solid fa-heart"></span></button>
                            @{
                                if (omsSetting.Id > 0 && omsSetting.QuickChargeEnabled)
                                {
                                    <button type="button" @onclick="ShowQuickChargeModal" class="btn btn-lg btn-outline-primary"><span class="fa-solid fa-calculator"></span></button>
                                }
                            }
                            <button type="button" class="btn btn-lg btn-outline-primary"><span class="fa-solid fa-user-clock"></span></button>
                            @{
                                if (omsSetting.Id > 0 && omsSetting.OMSCollections != null)
                                {
                                    foreach (var collection in omsSetting.OMSCollections)
                                    {
                                        <button type="button" class="btn btn-lg btn-outline-primary w-100" @onclick="() => ShowCollectionProducts(collection.CollectionName, collection.CollectionGUID, collection.CollectionId)">@collection.OMSTabName</button>
                                    }
                                }
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>


        <SfDialog Width="600px" IsModal="true" @bind-Visible="@IsSelectGiftCardTypeModalVisible">
            <DialogEvents OnOverlayClick="() => IsSelectGiftCardTypeModalVisible = false">
            </DialogEvents>
            <DialogTemplates>
                <Content>
                    <div class="row ">
                        <div class="col-6 text-center border border-grey">
                            <h5 class="m-2">Electronic Gift Card</h5>
                            <p class="m-2">Sent via email or SMS only</p>
                            <img class="m-5" src="@(_synergyAppSettings.Value.SynergyCDNBaseUrl+ "admin/images/electronic-gift-card.png")" alt="@applicableGiftCard.ProductName" width="170" /><br />
                            <button @onclick="DisplayGiftCardDesigns" class="btn m-2 btn-primary">Select</button>
                        </div>
                        <div class="col-6 text-center border border-grey">
                            <h5 class="m-2">Physical Gift Card</h5>
                            <p class="m-2">Shipped or customer pickup only</p>
                            <img class="m-5" src="@(_synergyAppSettings.Value.SynergyCDNBaseUrl+ "admin/images/physical-gift-card.png")" alt="@applicableGiftCard.ProductName" width="170" /><br />
                            <button @onclick="() => DisplayGiftCardValidationModal(0)" class="btn m-2 btn-primary">Select</button>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsPurchaseGiftCardToOrderModalVisible">
            <DialogEvents OnClose="ClosePurchaseGiftCardModal" OnOverlayClick="ClosePurchaseGiftCardModal">
            </DialogEvents>
            <DialogTemplates>
                <Header>
                    @if (applicableGiftCard.DigitalGiftCardbyEmailOrSMS && applicableGiftCard.PhysicalGiftCardbyMail)
                    {
                        <a class="btn btn-sm btn-outline-dark me-6" href="javascript:void(0)" @onclick="DisplaySelectGiftCardTypeModal">@("<")</a>
                    }
                    @((selectedGiftCardDesign > 0)? "Scan Electronic Gift Card": "Scan Physical Gift Card")
                </Header>
            </DialogTemplates>
            <div class="row ">
                <p class="giftCardDesignDetail text-center">@((selectedGiftCardDesign > 0)? "Sent via email or SMS only": "Shipped or customer pickup only")</p>
                <div class="col-12 text-center">
                    <img class="mt-5 mb-2" src="@(_synergyAppSettings.Value.SynergyCDNBaseUrl+"admin/images/gift-card-barcode-scan.png")" alt="@applicableGiftCard.ProductName" width="200" /><br />
                </div>
                @{
                    if (isValidGiftCard)
                    {
                        if (isCustomGiftCard)
                        {
                            <h4 class="text-center mb-5">@orderCurrencySymbol@(applicableGiftCard.ProductPrice.ToString("n2")) - @orderCurrencySymbol@(applicableGiftCard.FinalPrice.ToString("n2"))</h4>
                        }
                        else
                        {
                            <h4 class="text-center mb-5">@orderCurrencySymbol@(applicableGiftCard.ProductPrice.ToString("n2"))</h4>
                        }
                    }
                }
            </div>
            <EditForm Model="getGiftCard" @ref="getGiftCardForm" Context="formContext">
                <DataAnnotationsValidator />
                <div class="row justify-content-center">
                    <div class="col-10">
                        <SfMaskedTextBox @ref="GiftCardMask" ID="search-gift-card" Mask="0000-0000-0000-0000" @onchange="() => isValidGiftCard = false" @bind-Value="@getGiftCard.GiftCardNumber" CssClass="form-control form-control-sm" Placeholder="Gift Card Number"></SfMaskedTextBox>
                        <ValidationMessage For="() => getGiftCard.GiftCardNumber" />
                    </div>
                </div>
                <div class="row mt-2 justify-content-center">
                    <div class="col-5">
                        <button class="btn mx-4 btn-primary" @onclick="GetGiftCard">Lookup</button>
                    </div>
                </div>
                @if (isValidGiftCard && isCustomGiftCard)
                {
                    <div class="row justify-content-center">
                        <div class="col-7">
                            <label class="form-label mt-2" for="gift-card-price">
                                Enter Gift Card Value
                            </label>
                            @if (isCustomGiftCard)
                            {
                                <SfNumericTextBox class="form-control" Min="@applicableGiftCard.ProductPrice" Max="@applicableGiftCard.FinalPrice" TValue="decimal" id="gift-card-price" ValidateDecimalOnType="true" Decimals=2 ShowSpinButton="false" @bind-Value=@applicableGiftCard.FinalPrice></SfNumericTextBox>
                            }
                        </div>
                    </div>
                }
            </EditForm>
            @if (isValidGiftCard)
            {
                <DialogButtons>
                    <DialogButton Content="Add to Order" OnClick="SaveGiftCardToOrder" IsPrimary="true" />
                </DialogButtons>
            }
        </SfDialog>

        <SfDialog Width="600px" IsModal="true" @bind-Visible="@IsSelectGiftCardDesignModalVisible">
            <DialogEvents OnOverlayClick="ClosePurchaseGiftCardModal">
            </DialogEvents>
            <DialogTemplates>
                <Header>Choose Electronic Gift Card Design<br /><span class="giftCardDesignDetail">Sent via email or SMS only</span></Header>
                <Content>
                    <div class="row ">
                        @{
                            foreach (var design in giftCardsDesigns)
                            {
                                <div class="col-12 col-md-4 d-flex align-items-center justify-content-center mb-4">
                                    <a href="javascript:void(0);" @onclick="() => DisplayGiftCardValidationModal(design.Id)">
                                        <div class="card shadow-none border h-100">
                                            <img src="@(_synergyAppSettings.Value.SynergyCDNBaseUrl + "business/photos/gift-cards/" + design.DesignImageName)" class="card-img-top img-fluid" alt="@(@design.DesignTitle + " Design")">
                                            <div class="bg-light p-2 text-center">
                                                @if (string.IsNullOrEmpty(design.DesignTitle))
                                                {
                                                    <input id="inputCustomDesign" class="form-control" type="text" @bind="design.DesignTitle" placeholder="Custom Design" />
                                                }
                                                else
                                                {
                                                    <p class="card-text">@design.DesignTitle</p>
                                                }
                                            </div>
                                        </div>
                                    </a>
                                </div>
                            }
                        }
                    </div>
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsOrderDiscountModalVisible">
            <DialogTemplates>
                <Header>Apply Discount</Header>
                <Content>

                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="Cancel" OnClick="CloseOrderDiscountModal" />
                <DialogButton Content="Apply" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="800px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsPromoModalVisible">
            <DialogTemplates>
                <Header>Apply Promo Code</Header>
                <Content>
                    <div class="input-group mb-3">
                        <SfDropDownList TValue="int" TItem="CustomDiscountModel" Placeholder="Select Promo" AllowFiltering="true" @bind-Value="applicablePromoCode.Id" DataSource="@businessDiscounts" aria-label="Promo List" CssClass="form-control form-control-sm pb-0 w-auto">
                            <DropDownListFieldSettings Text="DiscountName" Value="Id" />
                        </SfDropDownList>
                        @if (applicablePromoCode.Id > 0)
                        {
                            <button class="btn btn-outline-primary" type="button" id="btnApplyPromo" @onclick="ApplyPromoCode">Apply</button>
                        }
                    </div>
                    @if (omsSetting.FavPromoCodes.Any())
                    {
                        <div class="mt-4">
                            <h6>Popular Codes</h6>
                            <hr />
                            <div class="row g-2">
                                @foreach (var favPromoCode in omsSetting.FavPromoCodes)
                                {
                                    var discount = businessDiscounts.FirstOrDefault(x => x.Id == favPromoCode);
                                    @if (discount is not null)
                                    {
                                        <div class="col-6 col-md-4">
                                            <div class="d-grid h-100">
                                                <button class="btn @((applicablePromoCode.Id == discount.Id)? "btn-primary":"btn-outline-dark") border p-4" @onclick="() => applicablePromoCode.Id = discount.Id" type="button">@discount.DiscountName</button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                        </div>
                    }
                </Content>
            </DialogTemplates>
        </SfDialog>

        <SfDialog Width="400px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsDiscountsNotAllowedModalVisible">
            <DialogTemplates>
                <Header>Discounts Not Allowed</Header>
                <Content>
                    <label class="mb-2">@applyManualDiscountModel.ProductName</label>
                    <label>This product is excluded from all discounts</label>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton CssClass="px-md-4" OnClick="() => IsDiscountsNotAllowedModalVisible = false" Content="OK" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="800px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@infoModalVisible">
            <DialogTemplates>
                <Header>@(infoModel?.HeaderText ?? "Submit Is Not Allowed")</Header>
                <Content>
                    <label>@(infoModel?.ContentMessage ?? "Please provide all the details.")</label>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton CssClass="px-md-4" OnClick="() => infoModalVisible = false" Content="Okay" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <SfDialog Width="400px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsManualDiscountsModalVisible">
            <DialogTemplates>
                <Header>Add Discount</Header>
                <Content>
                    <EditForm Model="applyManualDiscountModel" Context="formContext">
                        <DataAnnotationsValidator />
                        <content>
                            <div class="mb-3">
                                <label for="inputDiscountSchema" class="form-label">Apply Discount</label>
                                <InputSelect id="inputDiscountSchema" @bind-Value="applyManualDiscountModel.DiscountType" class="form-select">
                                    @foreach (DiscountType adjustRateType in Enum.GetValues(typeof(DiscountType)))
                                    {
                                        if (adjustRateType == DiscountType.Amount || adjustRateType == DiscountType.Percent)
                                        {
                                            <option value="@adjustRateType">@adjustRateType</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="mb-3">
                                <label for="inputDiscountAmount" class="form-label">Discount By</label>
                                @{
                                    var maxVal = applyManualDiscountModel.AvailableAmt;
                                    if (applyManualDiscountModel.DiscountType == DiscountType.Percent)
                                        maxVal = 100;
                                }
                                <SfNumericTextBox CssClass="form-control" TValue="decimal" ValidateDecimalOnType="true" Format="@((applyManualDiscountModel.DiscountType == DiscountType.Amount)?"c2":"")" Placeholder="0.00" Min="Convert.ToDecimal(0.00)" Max="maxVal" Decimals=2 ShowSpinButton="false" @bind-Value="applyManualDiscountModel.Amount"></SfNumericTextBox>
                            </div>
                        </content>
                    </EditForm>
                </Content>

            </DialogTemplates>
            <DialogButtons>
                <DialogButton CssClass="px-md-4" OnClick="ApplyManualDiscount" Content="Apply Discount" IsPrimary="true" />
            </DialogButtons>
        </SfDialog>

        <DeleteConfirmation OpenDeleteDialog="openDeleteDialog" OnDialogClose="DialogClose" OnDeleteConfirmed="DeleteCustomerNote"></DeleteConfirmation>
        <AdjustShippingModal @ref="adjustShippingModalRef" IsAdjustShippingModalVisible="isAdjustShippingModalVisible" SaveOrderShippingCharges="SaveOrderShippingCharges" ShippingCharge="bindedShippingCharge" ShippingDate="bindedShippingDate"></AdjustShippingModal>
        <OrderTender @ref="orderTender" BusinessId="@(currentMember != null ? currentMember.Id : 0)" OrderGiftCard="order.OrderGiftCard" ApplyCashTender="(e) => ApplyCashTender(e)" ApplyTenderToOrder="(e) => ApplyTender(e.TenderChargeAmt, e.SelectedTenderType, e.GiftCardDetail)"  ShowChargeCreditCardModal="ShowChargeCreditCardModal"></OrderTender>

    </Authorized>
</AuthorizeView>

@code
{
    [Parameter]
    public Guid? OrderGUID { get; set; }
    private string title = "Create Order | Synergy Commerce";
    private string noteHeader = "Customer Notes";
    private bool NoteModalVisible { get; set; } = false;
    private bool IsTagsDialogVisible = false;
    private bool IsSalesRepsModalVisible = false;
    private bool IsAdjustGratuityModalVisible = false;
    private bool IsProductDetailModalVisible = false;
    private bool IsRemoveProductModalVisible = false;
    private bool IsChargeSalesTaxModalVisible = false;
    private bool IsOrderDiscountModalVisible = false;
    private bool IsPromoModalVisible = false;
    private bool IsDiscountsNotAllowedModalVisible = false;
    private bool IsManualDiscountsModalVisible = false;
    private bool IsApplyTenderModalVisible = false;
    private bool isAdjustShippingModalVisible = false;
    private bool IsSendCartToCustomer = false;
    private bool IsChargeCreditCardModalVisible = false;
    private bool IsFullfillmentTypeModalVisible = false;
    private bool IsCardsonFileModalVisible = false;
    private bool AddressModalVisibility = false;
    private bool IsReqShipDateModalVisible = false;
    private bool IsOrderSubmissionStateModalVisible = false;
    private bool IsSearchProductModalVisibile = false;
    private bool IsQuickChargeModalVisible = false;
    private bool IsTransactionLogDialogVisible = false;
    private bool IsPurchaseGiftCardToOrderModalVisible = false;
    private bool IsApplyGiftCardModalVisible = false;
    private bool IsSelectGiftCardTypeModalVisible = false;
    private bool IsSelectGiftCardDesignModalVisible = false;
    private bool isCreditCardsTenderApplication = false;
    private bool infoModalVisible = false;

    public bool SendToAlternativeEmail { get; set; }

    Member currentMember = null;
    bool SpinnerVisibility = true;
    CustomOrderNoteModel note = new CustomOrderNoteModel();
    List<SalesRepresentative> salesRepresentatives = new List<SalesRepresentative>();
    int[] bindedNotifyTeamMembers = new int[] { };
    private UserAddressRequestModel addressRequestModel = new UserAddressRequestModel { CountryCode = "US" };
    private List<CpCountry> countries = new List<CpCountry>();
    private List<CpState> states = new List<CpState>();
    private List<ProductListModel> products = new List<ProductListModel>();
    private List<CustomProductListModel> productDDList = new List<CustomProductListModel>();
    private List<ProductType> productTypes = new List<ProductType>();
    ProductDetailFullModel productDetails = new ProductDetailFullModel();
    private List<ProductData> ProductDataList = new List<ProductData>() { };
    private List<CustomCustomerModel> customers = new List<CustomCustomerModel>();
    private List<UserAddressModel> customerAddresses = new List<UserAddressModel>();
    private List<UserAddressModel> shipToCustomerAddresses = new List<UserAddressModel>();
    private List<CustomOrderNoteModel> orderNotes = new List<CustomOrderNoteModel>();
    List<BusinessPropertyModel> businessProfiles = new List<BusinessPropertyModel>();
    private int loggedInUserId { get; set; }
    private int offsetMinutes { get; set; }
    CustomersViewModel customer = new CustomersViewModel();
    CustomersViewModel shipToCustomer = new CustomersViewModel();
    private Guid? shipToCustomerGUID { get; set; }
    private List<PhoneMask> phoneMasks = new List<PhoneMask>();
    private ProductData removeProduct = new ProductData();
    OrderRequestModel order = new OrderRequestModel { OrderTenders = new List<OrderTenderRequestModel>(), OrderFulfillment = new List<OrderFulfillmentRequestModel> { new OrderFulfillmentRequestModel() } };
    private Guid? userGuid { get; set; }
    private bool showPhoneControl;
    private PhoneNumber phone;
    private PhoneNumber addressPhone;
    private PhoneNumber workPhone;
    private bool customerSelected { get; set; }
    SfGrid<ProductData> ProductsGrid = new SfGrid<ProductData>();
    private DateTime shipmentDate = DateTime.Today;
    private decimal balanceDue { get; set; }
    private CardType selectedCardType = CardType.Visa;
    SfDropDownList<int, CustomProductListModel> productddlObj { get; set; }
    SfDropDownList<string, CustomCustomerModel> customersddlObj { get; set; }
    SfGrid<ProductListModel> SearchProductsGrid;
    string productSearch = "";
    string productsModalHeader { get; set; }
    bool productsSearch = false;
    List<BusinessInventoryLocationModel> inventoryLocations = new List<BusinessInventoryLocationModel>();
    List<CustomDiscountModel> businessDiscounts = new List<CustomDiscountModel>();
    CustomDiscountModel applicablePromoCode = new CustomDiscountModel();
    CreditCardRequestModel creditCard = new CreditCardRequestModel();
    int[] salesReps = new int[] { };
    int[] selectedProducts = new int[] { };
    int[] bindedSalesReps = new int[] { };
    const int _noteCharLimit = 512;
    private int noteCharRemaining = _noteCharLimit;
    string customerNotes = "";
    const int MAXCustomerNotesCount = 512;
    private bool IsCreateCustomerDialogVisible { get; set; }
    private bool IsSuspendOrderConfirmationModalVisible { get; set; }
    private bool IsRemoveCustomerConfirmationModalVisible { get; set; }
    private bool IsClearOrderConfirmationModalVisible { get; set; }

    public string[] orderTags = new string[] { };
    public string[] bindedTags = new string[] { };
    const string _USCountry = "UNITED STATES";
    const decimal _salesTax = 0.0825M;
    const string _defaultSalesTaxPercent = "8.25%";
    private decimal salesTax { get; set; }
    private bool isSalesTaxApplied = true;
    private decimal bindedGratuity { get; set; }
    private decimal bindedShippingCharge { get; set; }
    private DateTime bindedShippingDate = DateTime.Today;
    private DateTime reqShipmentDate = DateTime.Today;
    private bool creditCardAdded = false;
    private int submittedOrderNum { get; set; }
    private string submittedOrderPrefix { get; set; }
    private Guid submittedOrderGUID { get; set; }
    const string _defaultCreditCardMask = "[1-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]-[0-9][0-9][0-9][0-9]";
    private string creditCardMask = _defaultCreditCardMask;
    private char promptCharacter = 'X';
    private int orderId { get; set; }
    private decimal quickChargeVal { get; set; }
    private int propertyId = 0;
    OMSSettingsFullModel omsSetting = new OMSSettingsFullModel();
    List<CreditCardRequestModel> cardsOnFile = new List<CreditCardRequestModel>();
    private OrderCustomerType EditableOrderCustomerType = OrderCustomerType.BillTo;
    private CustomGetGiftCardModel getGiftCard = new CustomGetGiftCardModel();
    private ProductData applicableGiftCard = new ProductData();
    ApplyManualDiscountModel applyManualDiscountModel = new ApplyManualDiscountModel();
    EditForm getGiftCardForm;
    private bool isValidGiftCard { get; set; }
    private bool isCustomGiftCard { get; set; }
    SfMaskedTextBox GiftCardMask;
    GiftCardDetail giftCard = new GiftCardDetail();
    List<GiftCardDesignsModel> giftCardsDesigns = new List<GiftCardDesignsModel>();
    int selectedGiftCardDesign { get; set; }
    bool openDeleteDialog = false;
    Guid noteIdForDelete { get; set; }
    private Guid billingAddresGUID { get; set; }
    private Guid shippingAddressGUID { get; set; }
    private bool isAddAddress { get; set; }
    private string discountsStatus = "Active";
    DisplayInfoModal infoModel;
    private bool isSearchProductFocus { get; set; }
    private bool hideOrderSubmitModal { get; set; }
    AdjustShippingModal adjustShippingModalRef;

    List<CustomTagModel> tags = new List<CustomTagModel>();
    UserDetailViewModel loggedInUser = new UserDetailViewModel();
    private RenderMode Mode = RenderMode.Inline;
    private string orderCurrencySymbol { get;set;}

    private EditContext? addressFormContext;
    OrderTender orderTender { get; set; }

    private class CustomProductListModel
    {
        public int Id { get; set; }
        public Guid IdGUID { get; set; }
        public string ProductName { get; set; }
        public int ProductType { get; set; }
    }

    public class CustomCustomerModel
    {
        public int Id { get; set; }
        public string Name { get; set; }
        public string Email { get; set; }
    }

    private class CustomOrderNoteModel : OrderNoteModel
    {
        public Guid IdGUID { get; set; }
    }

    private class ApplyManualDiscountModel
    {
        public DiscountType DiscountType { get; set; }
        public decimal Amount { get; set; }
        public int DiscountProductId { get; set; }
        public decimal AvailableAmt { get; set; }
        public string ProductName { get; set; }
    }

    private class DisplayInfoModal
    {
        public string HeaderText { get; set; }
        public string ContentMessage { get; set; }
    }

    private void DialogClose() => openDeleteDialog = false;

    private class CustomGetGiftCardModel : IValidatableObject
    {
        [Required(ErrorMessage = "Please enter the Gift Card number")]
        public string GiftCardNumber { get; set; }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        {
            if (!(Regex.IsMatch(GiftCardNumber, "^[1-9][0-9]{15}$")))
            {
                yield return new ValidationResult(
                    errorMessage: "Please enter a valid Gift Card Number",
                    memberNames: new[] { "GiftCardNumber" }
                );
            }
        }
    }

    public class CustomTagModel
    {
        public string Text { get; set; }
        public string Value { get; set; }
    }

    public class SalesRepresentative
    {
        public int UserId { get; set; }
        public string Name { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Email { get; set; }
    }

    public class ProductData
    {
        public int ProductId { get; set; }
        public Guid ProductGuid { get; set; }
        public string ProductName { get; set; }
        public string ProductSku { get; set; }
        public int Quantity { get; set; }
        public decimal ProductPrice { get; set; }
        public decimal FinalPrice { get; set; }
        public decimal Extended
        {
            get { return this.Quantity * this.FinalPrice; }
            set { }
        }
        public string ProductImage { get; set; }
        public int ProductStatus { get; set; }
        public int ProductType { get; set; }
        public bool ChargeSalesTax { get; set; }
        public string AccountNumber { get; set; }
        public bool DigitalGiftCardbyEmailOrSMS { get; set; }
        public bool PhysicalGiftCardbyMail { get; set; }
        //public string DesignTitle { get; set; }
        public string DesignImageName { get; set; }
        public int GiftCardType { get; set; }
        public bool ExcludeDiscounts { get; set; }
    }
    protected override async Task OnInitializedAsync()
    {
        addressFormContext = new EditContext(addressRequestModel);

        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();
        loggedInUser = await localStorage.GetItemAsync<UserDetailViewModel>("user");

        GetProductsList();

        var getCurrentMemberDetails = _businessViewModel.GetBusinessDetail(Guid.Empty, currentMember.Id);


        var getBusinessDiscounts = _discountViewModel.GetDiscounts(currentMember.Id, null, null, discountsStatus, string.Empty, Channels.OMS.ToString());

        var getLoggedInUserData = await localStorage.GetItemAsync<UserDetailViewModel>("user");
        if (getLoggedInUserData is not null)
        {
            loggedInUserId = getLoggedInUserData.Id;
            offsetMinutes = getLoggedInUserData.OffsetMinutes;
        }

        var getBusinessProfiles = await _businessPropertyViewModel.GetBusinessProperties(currentMember.Id);
        businessProfiles = getBusinessProfiles ?? new List<BusinessPropertyModel>();
        if (businessProfiles.Count > 0)
        {
            propertyId = businessProfiles[0].Id;
        }

        var getBusinessDiscountsResponse = await getBusinessDiscounts;
        if (getBusinessDiscountsResponse.success)
            businessDiscounts = getBusinessDiscountsResponse.data?
                                    .Select(x => new CustomDiscountModel
                                    {
                                        Id = x.Id,
                                        IdGUID = x.IdGUID,
                                        DiscountCode = x.DiscountCode,
                                        DiscountType = x.DiscountType,
                                        DiscountName = x.DiscountName
                                    }).ToList() ?? new List<CustomDiscountModel>();

        var getCurrentMemberDetailsResponse = await getCurrentMemberDetails;
        if (getCurrentMemberDetailsResponse.success)
            orderCurrencySymbol = getCurrentMemberDetailsResponse.data.CurrencySymbol;

        // Edit the Suspended Order
        if (OrderGUID.HasValue)
        {
            var orderDetailsResponse = await _orderViewModel.GetOrderDetailsAsync(0, 0, 0, OrderGUID.Value.ToString());
            if (orderDetailsResponse.success)
            {
                var orderDetails = orderDetailsResponse.data;
                order = new OrderRequestModel
                {
                    BusinessId = orderDetails.BusinessId,
                    Currency = orderDetails.Currency,
                    DeliveryMethod = orderDetails.DeliveryMethod,
                    DeviceId = orderDetails.DeviceId,
                    LocationId = orderDetails.LocationId,
                    TeamMemberId = orderDetails.TeamMemberId,
                    TotalTax = orderDetails.TotalTax,
                    GrandTotal = orderDetails.GrandTotal,
                    OrderSource = orderDetails.OrderSource,
                    TotalGratuity = orderDetails.TotalGratuity,
                    OrderStatus = orderDetails.OrderStatus,
                    OrderType = orderDetails.OrderType,
                    SubTotal = orderDetails.SubTotal,
                    ShippingDiscountsTotal = orderDetails.ShippingDiscountsTotal,
                    TotalDiscounts = orderDetails.TotalDiscounts,
                    TotalDuties = orderDetails.TotalDuties,
                    TotalServiceFees = orderDetails.TotalServiceFees,
                    TotalShipping = orderDetails.TotalShipping,
                    BillingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(orderDetails.BillToAddress)),
                    ShippingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(orderDetails.ShipToAddress)),
                    BillToCustomer = JsonConvert.DeserializeObject<OrderCustomerRequestModel>(JsonConvert.SerializeObject(orderDetails.BillingCustomer)),
                    ShipToCustomer = JsonConvert.DeserializeObject<OrderCustomerRequestModel>(JsonConvert.SerializeObject(orderDetails.ShippingCustomer)),
                    OrderDiscount = JsonConvert.DeserializeObject<List<OrderDiscountRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderDiscount)),
                    OrderFee = JsonConvert.DeserializeObject<List<OrderFeeRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderFee)),
                    OrderFulfillment = JsonConvert.DeserializeObject<List<OrderFulfillmentRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderFulfillment)),
                    //OrderItems = JsonConvert.DeserializeObject<List<OrderItemRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderItems)),
                    OrderGiftCard = JsonConvert.DeserializeObject<List<OrderGiftCardRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderGiftCard)),
                    //OrderMeta = JsonConvert.DeserializeObject<List<OrderMetaRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderMeta)),
                    OrderSalesRep = JsonConvert.DeserializeObject<List<OrderSalesRepRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderSalesRep)),
                    OrderTags = JsonConvert.DeserializeObject<List<OrderTagRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderTags)),
                    OrderTenders = JsonConvert.DeserializeObject<List<OrderTenderRequestModel>>(JsonConvert.SerializeObject(orderDetails.OrderTenders)),
                };
                orderId = orderDetails.Id;
                order.OrderTenders.ForEach(x => x.CreatedDate = orderDetails.OrderTenders.Where(y => y.Id == x.Id).FirstOrDefault().TransactionDate);
                await GetTeamUsers();
                orderNotes = JsonConvert.DeserializeObject<List<CustomOrderNoteModel>>(JsonConvert.SerializeObject(orderDetails.OrderNotes));
                orderNotes.ForEach(x => x.IdGUID = Guid.NewGuid());
                if (order.OrderSalesRep != null)
                {
                    salesReps = order.OrderSalesRep.Select(x => x.UserId).ToArray();
                }
                if (order.OrderTags != null)
                {
                    tags = order.OrderTags.Select(x => new CustomTagModel { Text = x.Value.ToString(), Value = x.Value.ToString() }).ToList();
                    tags.Distinct();
                    orderTags = tags.Select(x => x.Value).ToArray();
                    bindedTags = orderTags;
                }
                foreach (var product in orderDetails.OrderItems)
                {
                    var productData = new ProductData
                    {
                        ProductId = product.ProductId,
                        ProductName = product.ProductName,
                        ProductSku = product.ProductSku,
                        ProductPrice = product.ListPrice,
                        FinalPrice = product.ProductPrice,
                        Extended = product.ProductPrice,
                        ProductImage = product.ProductImageURL,
                        Quantity = product.Quantity,
                        ProductGuid = product.OrderItemGuid,
                        ProductType = product.OrderItemType,
                        ChargeSalesTax = product.Taxable
                    };
                    await ProductsGrid.AddRecordAsync(productData);
                }

                CalculateSalesTax();
                bindedGratuity = order.TotalGratuity;
                balanceDue = orderDetails.BalanceDue;
                if (orderDetails.OrderTransactions != null)
                {
                    foreach (var transaction in orderDetails.OrderTransactions)
                    {
                        var reqTender = order.OrderTenders.Where(x => x.Id == transaction.TenderId).FirstOrDefault();
                        if (reqTender.OrderTransactions == null)
                        {
                            reqTender.OrderTransactions = new List<OrderTransactionRequestModel>();
                        }
                        reqTender.OrderTransactions.Add(transaction);
                    }
                }
                if (order.BillToCustomer != null && !string.IsNullOrWhiteSpace(order.BillToCustomer.Email))
                {
                    var getCustomer = await _customerViewModel.GetBusinessCustomerByEmail(order.BillToCustomer.Email);
                    customer = JsonConvert.DeserializeObject<CustomersViewModel>(JsonConvert.SerializeObject(getCustomer.data));
                    customer.CustomerId = customer.Id;
                    userGuid = customer.CustomerGUID;
                    order.BillToCustomer.UserId = customer.CustomerId;
                    billingAddresGUID = orderDetails.BillToAddress.AddresGuid;
                    customerSelected = true;
                }
                if (order.ShipToCustomer != null && !string.IsNullOrWhiteSpace(order.ShipToCustomer.Email))
                {
                    var getCustomer = await _customerViewModel.GetBusinessCustomerByEmail(order.ShipToCustomer.Email);
                    shipToCustomer = JsonConvert.DeserializeObject<CustomersViewModel>(JsonConvert.SerializeObject(getCustomer.data));
                    shipToCustomer.CustomerId = shipToCustomer.Id;
                    shipToCustomerGUID = shipToCustomer.CustomerGUID;
                    order.ShipToCustomer.UserId = shipToCustomer.CustomerId;
                    shippingAddressGUID = orderDetails.ShipToAddress.AddresGuid;
                }
            }
        }
        else
        {
            order.DeliveryMethod = OrderDeliveryMethod.Ship;
        }

        //var getProductsResponse = await getProductsList;
        //if (getProductsResponse.success)
        //    productDDList = getProductsResponse.data?.OrderBy(x => x.ProductTitle).Select(x => new CustomProductListModel { IdGUID = x.ProductGuid, ProductName = x.ProductTitle, ProductType = x.ProductType }).ToList() ?? new List<CustomProductListModel>();
        bindedSalesReps = salesReps;
        SpinnerVisibility = false;
    }

    private async Task GetProductsList()
    {
        var getProductsResponse = await _productViewModel.SearchProducts(currentMember.Id, true, string.Empty);
        if (getProductsResponse.success)
            productDDList = getProductsResponse.data?.OrderBy(x => x.ProductTitle).Select(x => new CustomProductListModel { Id = x.Id, IdGUID = x.ProductGuid, ProductName = x.ProductTitle, ProductType = x.ProductType }).ToList() ?? new List<CustomProductListModel>();
    }

    private void ChangeCustomerSection(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        if (Convert.ToInt32(args.Value) == -1)
        {
            IsCreateCustomerDialogVisible = true;
        }
        else
        {
            IsCreateCustomerDialogVisible = false;
        }
    }

    private void CloseCreateCustomerModal()
    {
        showPhoneControl = false;
        IsCreateCustomerDialogVisible = false;
        StateHasChanged();
    }

    private async Task GetProductTypes()
    {
        ProductTypeResponse productTypeResponse = await _productViewModel.GetProductTypes();
        if (productTypeResponse.success)
        {
            productTypes = productTypeResponse.data;
        }
    }

    private async Task ShowProductDetailModal(int productId, Guid productGUID, decimal productPrice)
    {
        SpinnerVisibility = true;
        var productDetailsResponse = await _productViewModel.GetProductDetails(productId, productGUID.ToString(), 0);
        if (productDetailsResponse.success)
        {
            if (!productTypes.Any())
            {
                await GetProductTypes();
            }
            productDetails = productDetailsResponse.data;
            if (productDetails.ProductType == (int)ProductTypeEnum.GiftCard)
            {
                productDetails.RetailPrice = productPrice;
                productDetails.SalePrice = productPrice;
            }
            IsProductDetailModalVisible = true;
        }
        else
        {
            toastService.ShowToast(productDetailsResponse.error_info.description, ToastLevel.Error);
        }
        SpinnerVisibility = false;
    }

    private void CloseProductDetailModal()
    {
        IsProductDetailModalVisible = false;
    }
    private void ShowAdjustGratuityModal()
    {
        bindedGratuity = order.TotalGratuity;
        IsAdjustGratuityModalVisible = true;
    }

    private void ShowRemoveCustomerModal()
    {
        IsRemoveCustomerConfirmationModalVisible = true;
    }

    private void RemoveCustomer()
    {
        IsRemoveCustomerConfirmationModalVisible = false;
        order.BillToCustomer = new OrderCustomerRequestModel();
        order.ShipToCustomer = new OrderCustomerRequestModel();
        order.ShippingAddress = new OrderAddressRequestModel();
        order.BillingAddress = new OrderAddressRequestModel();
        customerSelected = false;
        customer = new CustomersViewModel();
        shipToCustomer = new CustomersViewModel();
        userGuid = null;
        shipToCustomerGUID = null;
        customers = new List<CustomCustomerModel>();
        customerAddresses = new List<UserAddressModel>();
        StateHasChanged();
        toastService.ShowToast("Customer removed from the order succesfully.", ToastLevel.Success);
    }

    private void SaveOrderGratuity()
    {
        order.TotalGratuity = bindedGratuity;
        CalcualtePricesForProduct();
        IsAdjustGratuityModalVisible = false;
        toastService.ShowToast("Gratuity Charges applied succesfully.", ToastLevel.Success);
    }

    private void SaveOrderShippingCharges()
    {
        if (adjustShippingModalRef.ShippingDate < DateTime.Today)
        {
            toastService.ShowToast($"Shipping Date must be at least {DateTime.Now.ToString("MM/dd/yyyy")}", ToastLevel.Error);
        }
        else
        {
            order.TotalShipping = adjustShippingModalRef.ShippingCharge;
            shipmentDate = adjustShippingModalRef.ShippingDate;
            CalcualtePricesForProduct();
            isAdjustShippingModalVisible = false;
            toastService.ShowToast("Shipping Charges applied succesfully.", ToastLevel.Success);
        }
    }

    private void ShowRemoveProductModal(int productId)
    {
        var removeProd = ProductDataList.Where(x => x.ProductId == productId).FirstOrDefault();
        if (removeProd != null)
        {
            removeProduct = removeProd;
        }
        if (removeProduct.Quantity == 1)
        {
            IsRemoveProductModalVisible = true;
        }
        else
        {
            ReduceProductQty(false);
        }
    }

    private void RemoveProduct(ProductData product)
    {
        removeProduct = product;
        ReduceProductQty(true);
        toastService.ShowToast("Product removed successfully.", ToastLevel.Success);
        Thread.Sleep(480);
    }

    private void CloseRemoveProductModal()
    {
        removeProduct = new ProductData();
        IsRemoveProductModalVisible = false;
    }

    private void ShowChargeSalesTaxModal()
    {
        IsChargeSalesTaxModalVisible = true;
    }

    private void CloseChargeSalesTaxModal()
    {
        IsChargeSalesTaxModalVisible = false;
    }

    private void ShowOrderDiscountModal()
    {
        IsOrderDiscountModalVisible = true;
    }
    private void CloseOrderDiscountModal()
    {

        IsOrderDiscountModalVisible = false;
    }
    private void ShowPromoModal()
    {
        applicablePromoCode = new CustomDiscountModel();
        IsPromoModalVisible = true;
    }
    private void ClosePromoModal()
    {
        IsPromoModalVisible = false;
    }

    private async Task ShowApplyTenderModal()
    {
        if (order.DeliveryMethod == OrderDeliveryMethod.Ship && !IsShipToAddressAdded())
        {
            infoModel = new DisplayInfoModal
            {
                HeaderText = "Customer Information Required",
                ContentMessage = "To add a Tender to a Ship to Customer order, you must first select a customer and choose a shipping method."
            };
            infoModalVisible = true;
            return;
        }
        await orderTender.DisplayApplyTenderModal(balanceDue, false, (int)TenderType.Cash, false, false, customer.CustomerId, balanceDue, omsSetting.PaymentProfile);
    }

    private void ShowAdjustShippingModal()
    {
        bindedShippingCharge = order.TotalShipping;
        bindedShippingDate = shipmentDate;
        isAdjustShippingModalVisible = true;
    }

    private void CloseAdjustShippingModal()
    {
        isAdjustShippingModalVisible = false;
    }

    private void ShowReqShipDateModal()
    {
        reqShipmentDate = shipmentDate;
        IsReqShipDateModalVisible = true;
    }

    private void SaveReqShipDate()
    {
        if (reqShipmentDate < DateTime.Today)
        {
            toastService.ShowToast($"Ship Date should be at least {DateTime.Now.ToString("MM/dd/yyyy")}", ToastLevel.Error);
        }
        else
        {
            shipmentDate = reqShipmentDate;
            IsReqShipDateModalVisible = false;
            toastService.ShowToast("Ship Date updated succesfully.", ToastLevel.Success);
        }
    }

    private void ShowSendCartToCustomerModal()
    {
        IsSendCartToCustomer = true;
    }

    private void CloseSendCartToCustomerModal()
    {
        IsSendCartToCustomer = false;
    }

    private void ShowFullfillmentTypeModal()
    {
        IsFullfillmentTypeModalVisible = true;
    }

    private void CloseFullfillmentTypeModal()
    {
        IsFullfillmentTypeModalVisible = false;
    }

    private void ShowChargeCreditCardModal()
    {
        var creditCard = new CreditCardRequestModel();
        if (customerSelected)
        {
            creditCard.CardHolderName = order.BillToCustomer.FirstName + " " + order.BillToCustomer.LastName;
            creditCard.SaveCardOnFile = true;
        }
        orderTender.DisplayChargeCreditCardModal(creditCard.CardHolderName, creditCard.SaveCardOnFile, (int)TenderType.CreditCard);
    }

    private void CloseChargeCreditCardModal()
    {
        IsChargeCreditCardModalVisible = false;
        //await GetCardsOnFile();
    }

    private async Task OpenAddressModal(OrderCustomerType orderCustomerType)
    {
        SpinnerVisibility = true;
        if (orderCustomerType == OrderCustomerType.BillTo)
        {
            EditableOrderCustomerType = OrderCustomerType.BillTo;
            var response = await _customerViewModel.GetCustomerAddressList(userGuid.Value);
            customerAddresses = response.data;
        }
        else
        {
            EditableOrderCustomerType = OrderCustomerType.ShipTo;
            if (shipToCustomerGUID == null)
            {
                var response = await _customerViewModel.GetCustomerAddressList(userGuid.Value);
                customerAddresses = response.data;
            }
            else
            {
                var response = await _customerViewModel.GetCustomerAddressList(shipToCustomerGUID.Value);
                customerAddresses = response.data;
            }
        }
        AddressModalVisibility = true;
        SpinnerVisibility = false;
    }

    private void CloseAddressModal()
    {
        AddressModalVisibility = false;
    }

    private void ShowSuspendOrderModal()
    {
        IsClearOrderConfirmationModalVisible = false;
        note = new CustomOrderNoteModel();
        IsSuspendOrderConfirmationModalVisible = true;
    }

    private void ShowClearOrderModal()
    {
        IsClearOrderConfirmationModalVisible = true;
    }

    private void ShowSearchProductsModal()
    {
        productsModalHeader = "Search Products";
        productsSearch = true;
        productSearch = "";
        products = new List<ProductListModel>();
        IsSearchProductModalVisibile = true;
    }

    private async Task ShowFavProductsModal()
    {
        SpinnerVisibility = true;
        if (omsSetting.Id > 0 && omsSetting.OMSFavoritesCollection > 0)
        {
            await GetCollectionProducts(omsSetting.OMSFavoritesCollectionGUID, omsSetting.OMSFavoritesCollection);
        }
        else
        {
            products = new List<ProductListModel>();
        }
        productsSearch = false;
        productsModalHeader = "Favorites";
        SpinnerVisibility = false;
        IsSearchProductModalVisibile = true;
    }

    private async Task GetCollectionProducts(Guid collectionGuid, int collectionId)
    {
        var collectionProductsResponse = await _storeCollectionViewModel.GetStoreCollectionDetails(collectionGuid.ToString(), collectionId);
        products = new List<ProductListModel>();
        if (collectionProductsResponse.success)
        {
            var reqProducts = collectionProductsResponse.data.Products;
            if (reqProducts != null)
            {
                foreach (var product in reqProducts)
                {
                    ProductListModel reqProduct = JsonConvert.DeserializeObject<ProductListModel>(JsonConvert.SerializeObject(product));
                    reqProduct.Id = product.ProductId;
                    products.Add(reqProduct);
                }
            }
        }
    }

    private async Task ShowCollectionProducts(string collectionName, Guid collectionGUID, int collectionId)
    {
        SpinnerVisibility = true;
        productsSearch = false;
        await GetCollectionProducts(collectionGUID, collectionId);
        SpinnerVisibility = false;
        productsModalHeader = collectionName;
        IsSearchProductModalVisibile = true;
    }

    private void ShowQuickChargeModal()
    {
        quickChargeVal = 0;

        IsQuickChargeModalVisible = true;
    }

    private void ApplyShoppingCartStatus()
    {
        order.OrderStatus = OrderStatus.ShoppingCart;
        toastService.ShowToast("Applied Shopping Cart Status successfully.", ToastLevel.Success);
    }

    private async Task SuspendOrder()
    {
        order.OrderStatus = OrderStatus.Suspended;
        IsSuspendOrderConfirmationModalVisible = false;
        if (!string.IsNullOrWhiteSpace(note.Note))
        {
            note = new CustomOrderNoteModel
            {
                Note = note.Note,
                NoteType = (int)OrderNote.Private,
            };
            await ModalNoteSave();
        }
        SpinnerVisibility = true;
        var submitResponse = await HandleOrderSubmit();
        if (submitResponse)
            await HandlePostSuspendedOrder();
        else
            IsOrderSubmissionStateModalVisible = false;

        SpinnerVisibility = false;
    }

    private async Task ClearOrder()
    {
        IsClearOrderConfirmationModalVisible = false;
        await HandlePostSuspendedOrder();
    }

    private async Task GetSalesOrderSettings()
    {
        SpinnerVisibility = true;
        //quickChargeProduct = new ProductDetailFullModel();
        var settingResponse = await _salesOrderViewModel.GetSalesOrderDetails(propertyId);
        var getInventoryLocations = await _inventoryViewModel.GetInventoryLocations(currentMember.Id);
        if (getInventoryLocations.success)
        {
            inventoryLocations = getInventoryLocations.data;
        }

        if (settingResponse.success)
        {
            omsSetting = settingResponse.data;
        }
        else
        {
            omsSetting = new OMSSettingsFullModel();
        }

        SpinnerVisibility = false;
    }

    private async Task GetTeamUsers()
    {
        var teamResponse = await _teamViewModel.GetBusinessTeams(currentMember.Id);
        if (teamResponse.success)
        {
            salesRepresentatives = teamResponse.data.Select(x => new SalesRepresentative { UserId = x.UserId, FirstName = x.FirstName, LastName = x.LastName, Email = x.Email, Name = $"{x.LastName}, {x.FirstName} ({x.Email})" }).ToList();
        }
    }

    private async Task ChangeProductDetails(int variantId)
    {
        SpinnerVisibility = true;
        var getProductDetailsResponse = await _productViewModel.GetProductDetails(variantId, "", 0);
        if (getProductDetailsResponse.success)
        {
            productDetails = getProductDetailsResponse.data;
        }
        SpinnerVisibility = false;
    }

    private void SaveSalesRepresentatives()
    {
        IsSalesRepsModalVisible = false;
        if (salesReps == null)
        {
            salesReps = new int[] { };
        }
        bindedSalesReps = salesReps;
    }

    private void ShowTagsModal()
    {
        tags = bindedTags.Select(x => new CustomTagModel { Text = x, Value = x }).ToList();
        orderTags = bindedTags;
        IsTagsDialogVisible = true;
    }

    private async Task ShowSalesRepsModal()
    {
        if (salesRepresentatives.Any())
        {
            salesReps = bindedSalesReps;
        }
        else
        {
            await GetTeamUsers();
        }

        IsSalesRepsModalVisible = true;
    }

    private void SaveTags()
    {
        if (orderTags == null)
        {
            bindedTags = new string[] { };
        }
        else
        {
            bindedTags = orderTags;
        }
        IsTagsDialogVisible = false;
    }

    private async Task ModalNoteShowDefault(OrderNote noteType)
    {
        note = new CustomOrderNoteModel { Note = "", UserId = loggedInUserId };
        noteCharRemaining = _noteCharLimit;
        if (!salesRepresentatives.Any())
            await GetTeamUsers();
        bindedNotifyTeamMembers = new int[] { };
        if (noteType == OrderNote.Customer)
        {
            noteHeader = "Customer Notes";
            note.NoteType = (int)OrderNote.Customer;
        }
        else if (noteType == OrderNote.Shipping)
        {
            noteHeader = "Shipping Notes";
            note.NoteType = (int)OrderNote.Shipping;
        }
        else if (noteType == OrderNote.Gift)
        {
            noteHeader = "Gift Notes";
            note.NoteType = (int)OrderNote.Gift;
        }
        else if (noteType == OrderNote.Private)
        {
            noteHeader = "Merchant Notes";
            note.NoteType = (int)OrderNote.Private;
        }
        this.NoteModalVisible = true;
    }

    private async Task ModalNoteShow(Guid idGUID)
    {
        var reqNote = orderNotes.FirstOrDefault(x => x.IdGUID == idGUID);
        note = new CustomOrderNoteModel
        {
            Id = reqNote.Id,
            Note = reqNote.Note,
            CreatedDate = reqNote.CreatedDate,
            NoteType = reqNote.NoteType,
            OrderId = reqNote.OrderId,
            UserId = loggedInUserId,
            IdGUID = idGUID
        };
        if (!salesRepresentatives.Any())
            await GetTeamUsers();

        bindedNotifyTeamMembers = reqNote.NotifyUsers?.Select(x => x.Id).ToArray() ?? new int[] { };

        noteCharRemaining = (_noteCharLimit - note.Note.Length);
        if (note.NoteType == (int)OrderNote.Customer)
        {
            noteHeader = "Customer Notes";
        }
        else if (note.NoteType == (int)OrderNote.Shipping)
        {
            noteHeader = "Shipping Notes";
        }
        else if (note.NoteType == (int)OrderNote.Gift)
        {
            noteHeader = "Gift Notes";
        }
        else if (note.NoteType == (int)OrderNote.Private)
        {
            noteHeader = "Merchant Notes";
        }
        NoteModalVisible = true;
    }

    private void HandleNoteInput(ChangeEventArgs args)
    {
        var text = args.Value.ToString();
        var checkCharLength = (_noteCharLimit - text.Length);
        if (checkCharLength > 0)
        {
            note.Note = text;
            noteCharRemaining = checkCharLength;
        }
        else
        {
            noteCharRemaining = 0;
        }
    }

    private async Task<string> HandleOrderNoteAddUpdate()
    {
        note.OrderId = orderId;
        note.UserId = loggedInUserId;

        AddUpdateOrderNoteRequestModel reqNote = JsonConvert.DeserializeObject<AddUpdateOrderNoteRequestModel>(JsonConvert.SerializeObject(note));


        //reqNote.BusinessId = currentMember.Id;
        reqNote.NoteId = note.Id;
        var response = await _orderViewModel.AddUpdateOrderNoteAsync(reqNote);
        if (response.success)
        {
            note.Id = response.data.Id;
            return string.Empty;
        }
        return response.error_info.description;
    }

    private async Task ModalNoteSave()
    {
        if (string.IsNullOrWhiteSpace(note.Note))
        {
            toastService.ShowToast("Please enter the Note.", ToastLevel.Error);
            return;
        }
        else
        {
            if (bindedNotifyTeamMembers != null && bindedNotifyTeamMembers.Any())
            {
                note.NotifyUsers = new List<NoteNotifyUserModel>();
                foreach (var notifyUser in bindedNotifyTeamMembers)
                {
                    var notifyUserModel = new NoteNotifyUserModel();
                    var requiredUser = salesRepresentatives.FirstOrDefault(x => x.UserId == notifyUser);
                    notifyUserModel.Id = requiredUser.UserId;
                    notifyUserModel.Name = requiredUser.FirstName + " " + requiredUser.LastName;
                    notifyUserModel.Email = requiredUser.Email;
                    note.NotifyUsers.Add(notifyUserModel);
                }
            }
            if (orderId > 0)
            {
                var result = await HandleOrderNoteAddUpdate();
                if (!string.IsNullOrEmpty(result))
                {
                    toastService.ShowToast(result, ToastLevel.Error);
                    return;
                }
            }

            if (note.IdGUID != Guid.Empty)
            {
                var editNote = orderNotes.Where(x => x.IdGUID == note.IdGUID).FirstOrDefault();
                editNote.Note = note.Note;
                editNote.NotifyUsers = note.NotifyUsers;
                toastService.ShowToast(Constants.UpdateMessage, ToastLevel.Success);
            }
            else
            {
                note.CreatedDate = DateTime.UtcNow;
                note.IdGUID = Guid.NewGuid();
                var reqNote = JsonConvert.DeserializeObject<CustomOrderNoteModel>(JsonConvert.SerializeObject(note));
                orderNotes.Add(reqNote);
                toastService.ShowToast(Constants.SaveMessage, ToastLevel.Success);
            }
            NoteModalVisible = false;
        }
    }

    private void DeleteCustomerNote()
    {
        orderNotes.RemoveAll(x => x.IdGUID == noteIdForDelete);
        openDeleteDialog = false;
        toastService.ShowToast(Constants.RemoveMessage, ToastLevel.Success);
    }

    private void DisplayNoteDeleteConfirmation(Guid idGuid)
    {
        noteIdForDelete = idGuid;
        openDeleteDialog = true;
    }

    private void OnOverlayclick(MouseEventArgs arg)
    {
        IsTagsDialogVisible = false;
        IsSalesRepsModalVisible = false;
        NoteModalVisible = false;
    }

    private string ValidateEmailAddress()
    {
        if (string.IsNullOrWhiteSpace(addressRequestModel.Email))
            return "Please enter the Email Id.";
        else if (!CellarPassAppAdmin.Shared.Helpers.Validator.EmailIsValid(addressRequestModel.Email))
            return "Please enter the valid Email Id.";
        else
            return string.Empty;
    }

    private async Task HandleAddressSubmit()
    {
        var emailErrorMsg = ValidateEmailAddress();
        if (!(emailErrorMsg == string.Empty))
        {
            toastService.ShowToast(emailErrorMsg, ToastLevel.Error);
            return;
        }
        if (addressFormContext.Validate())
        {
            if (string.IsNullOrEmpty(addressRequestModel.Phone))
            {
                toastService.ShowToast("Please enter phone number.", ToastLevel.Error);
                return;
            }
            SpinnerVisibility = true;
            var state = states.Where(x => x.StateCode == addressRequestModel.StateCode).FirstOrDefault();
            addressRequestModel.State = state.State;
            addressRequestModel.Active = true;
            var country = countries.Where(x => x.CountryCode == addressRequestModel.CountryCode).FirstOrDefault();
            addressRequestModel.Country = country.Name;
            if (addressRequestModel.UserGUID != Guid.Empty)
            {
                var addUpdateUserAddressResponse = await _customerViewModel.AddUpdateCustomerAddress(addressRequestModel);
                if (addUpdateUserAddressResponse.success)
                {
                    toastService.ShowToast(Constants.UpdateMessage, ToastLevel.Success);
                }
                else
                {
                    toastService.ShowToast(addUpdateUserAddressResponse.error_info.description, ToastLevel.Error);
                }
            }
            else
            {
                AddCustomerRequestModel addCustomerRequest = JsonConvert.DeserializeObject<AddCustomerRequestModel>(JsonConvert.SerializeObject(addressRequestModel));
                addCustomerRequest.BusinessId = currentMember.Id;
                addCustomerRequest.AddressPhone = addCustomerRequest.Phone;
                var addCustomerResponse = await _customerViewModel.AddBusinessCustomer(addCustomerRequest);
                if (addCustomerResponse.success)
                {
                    var userdataGUID = new Guid();
                    if (EditableOrderCustomerType == OrderCustomerType.BillTo)
                    {
                        userGuid = addCustomerResponse.data;
                        userdataGUID = userGuid.Value;
                    }
                    else
                    {
                        shipToCustomerGUID = addCustomerResponse.data;
                        userdataGUID = shipToCustomerGUID.Value;
                    }

                    var response = await _customerViewModel.GetCustomerAddressList(userdataGUID);
                    var address = response.data[0];

                    if (addressRequestModel.IsDefaultBilling)
                    {
                        var setDefaultBillingAddressResponse = await _customerViewModel.UpdateCustomerDefaultBillingAddress(address.AddresGuid);
                    }

                    if (addressRequestModel.IsDefaultShipping)
                    {
                        var setDefaultShippingAddressResponse = await _customerViewModel.UpdateCustomerDefaultShippingAddress(address.AddresGuid);
                    }
                }
                else
                {
                    toastService.ShowToast(addCustomerResponse.error_info.description, ToastLevel.Error);
                    SpinnerVisibility = false;
                    return;
                }
            }
            var getCustomer = await _customerViewModel.GetBusinessCustomerByEmail(addressRequestModel.Email);

            if (EditableOrderCustomerType == OrderCustomerType.BillTo)
            {
                userGuid = getCustomer.data.CustomerGUID;
                customer = JsonConvert.DeserializeObject<CustomersViewModel>(JsonConvert.SerializeObject(getCustomer.data));
                customer.CustomerId = getCustomer.data.Id;
                await ShowAddressesForCustomer(userGuid.Value, OrderCustomerType.BillTo);
                if (shipToCustomerGUID == null || shipToCustomerGUID == Guid.Empty || userGuid == shipToCustomerGUID)
                {
                    shipToCustomerGUID = userGuid;
                    shipToCustomer = customer;
                    shipToCustomer.CustomerId = customer.CustomerId;
                    await ShowAddressesForCustomer(userGuid.Value, OrderCustomerType.ShipTo);
                }
            }
            else
            {
                shipToCustomerGUID = getCustomer.data.CustomerGUID;
                shipToCustomer = JsonConvert.DeserializeObject<CustomersViewModel>(JsonConvert.SerializeObject(getCustomer.data));
                shipToCustomer.CustomerId = getCustomer.data.Id;
                await ShowAddressesForCustomer(shipToCustomerGUID.Value, OrderCustomerType.ShipTo);
                if (userGuid == null || userGuid == Guid.Empty || shipToCustomerGUID == userGuid)
                {
                    userGuid = shipToCustomerGUID;
                    customer = shipToCustomer;
                    customer.CustomerId = shipToCustomer.CustomerId;
                    await ShowAddressesForCustomer(shipToCustomerGUID.Value, OrderCustomerType.BillTo);

                }
            }

            customerSelected = true;
            showPhoneControl = false;
            IsCreateCustomerDialogVisible = false;
            SpinnerVisibility = false;
        }
    }

    private async Task GetSearchedProducts(string searchProduct)
    {
        if (!string.IsNullOrWhiteSpace(searchProduct) && searchProduct.Length > 3)
        {
            var productsResponse = await _productViewModel.SearchProducts(currentMember.Id, false, searchProduct);
            if (productsResponse.success)
            {
                await productddlObj.ClearAsync();
                products = productsResponse.data;
            }
        }
        else
        {
            products = new List<ProductListModel>();
        }
    }

    private async Task Filteringhandler(FilteringEventArgs args)
    {
        await GetSearchedProducts(args.Text);
    }

    private async Task FilterExistingCustomers(FilteringEventArgs args)
    {
        var searchVal = args.Text ?? string.Empty;
        if (!string.IsNullOrWhiteSpace(searchVal) && searchVal.Length > 3)
        {
            var searchCustomersResponse = await _customerViewModel.SearchBusinessCustomers(currentMember.Id, searchVal);
            if (searchCustomersResponse.success)
            {
                await customersddlObj.ClearAsync();
                customers = searchCustomersResponse.data.Select(x => new CustomCustomerModel { Id = x.CustomerId, Email = x.Email, Name = $"{x.LastName}, {x.FirstName} ({x.Email})" }).ToList();
            }
        }
        else
        {
            customers = new List<CustomCustomerModel>();
        }
    }

    private async Task<ProductData> GetProductDetails(int productId, string productGUID)
    {
        var getProductDetails = await _productViewModel.GetProductDetails(productId, productGUID, 0);
        var newProduct = new ProductData();
        if (getProductDetails.success)
        {
            var product = getProductDetails.data;
            newProduct = new ProductData
            {
                ProductId = product.Id,
                ProductName = product.ProductTitle,
                ProductSku = product.ProductSku,
                ProductPrice = product.RetailPrice,
                Quantity = 1,
                FinalPrice = product.SalePrice,
                Extended = product.SalePrice,
                ProductImage = product.ProductImageURL,
                ProductType = product.ProductType,
                ProductGuid = product.ProductGuid,
                ProductStatus = product.ProductStatus,
                ChargeSalesTax = product.ChargeSalesTax,
                DigitalGiftCardbyEmailOrSMS = product.DigitalGiftCardbyEmailOrSMS,
                PhysicalGiftCardbyMail = product.PhysicalGiftCardbyMail,
                ExcludeDiscounts = product.ExcludeDiscounts
            };
        }
        return newProduct;
    }

    private async Task AddProductsToOrder(ProductListModel product)
    {
        var newProduct = await GetProductDetails(product.Id, product.ProductGuid.ToString());
        order.SubTotal = order.SubTotal + newProduct.ProductPrice;
        var discountPrice = newProduct.ProductPrice - newProduct.FinalPrice;
        if (discountPrice > 0)
            UpdateOrderDiscountByProduct(true, discountPrice);
        await ProductsGrid.AddRecordAsync(newProduct);
    }

    private async Task AddSearchProductToOrder(ProductListModel model)
    {
        var existingProductCheck = ProductDataList.Where(x => x.ProductGuid == model.ProductGuid).FirstOrDefault();
        if (existingProductCheck != null)
        {
            existingProductCheck.Quantity += 1;
            order.SubTotal = order.SubTotal + existingProductCheck.ProductPrice;
            var discountPrice = existingProductCheck.ProductPrice - existingProductCheck.FinalPrice;
            if (discountPrice > 0)
                UpdateOrderDiscountByProduct(true, discountPrice);
        }
        else
        {
            await AddProductsToOrder(model);
        }

        CalcualtePricesForProduct();
    }

    private async Task HanldeSearchProductsOnOpen()
    {
        isSearchProductFocus = false;
        await productddlObj.FocusOutAsync();
    }

    private async Task OnValueSelecthandler(SelectEventArgs<CustomProductListModel> args)
    {
        await productddlObj.ClearAsync();

        if (isSearchProductFocus)
        {
            await HanldeSearchProductsOnOpen();
            return;
        }
        if (args.ItemData.ProductType == (int)ProductTypeEnum.GiftCard)
        {
            var product = args.ItemData;
            applicableGiftCard = await GetProductDetails(0, product.IdGUID.ToString());

            selectedGiftCardDesign = 0;
            if (applicableGiftCard.PhysicalGiftCardbyMail && applicableGiftCard.DigitalGiftCardbyEmailOrSMS)
            {
                IsSelectGiftCardTypeModalVisible = true;
            }
            else if (applicableGiftCard.DigitalGiftCardbyEmailOrSMS)
            {
                await DisplayGiftCardDesigns();
            }
            else if (applicableGiftCard.PhysicalGiftCardbyMail)
            {
                DisplayGiftCardValidationModal(0);
            }
        }
        else
        {
            var product = new ProductListModel { ProductGuid = args.ItemData.IdGUID };
            await AddSearchProductToOrder(product);
            ProductsGrid.Refresh();
            toastService.ShowToast("Item added to order successfully", ToastLevel.Success);
        }
        isSearchProductFocus = true;
        await productddlObj.FocusOutAsync();
    }

    private async Task ShowAddressesForCustomer(Guid userGuid, OrderCustomerType orderCustomerType)
    {
        var response = await _customerViewModel.GetCustomerAddressList(userGuid);
        customerAddresses = response.data;

        var defaultBillingAddress = customerAddresses.Where(x => x.IsDefaultBilling && x.Active).FirstOrDefault();
        var defaultShippingAddress = customerAddresses.Where(x => x.IsDefaultShipping && x.Active).FirstOrDefault();
        if (orderCustomerType == OrderCustomerType.BillTo)
        {
            if (defaultBillingAddress != null)
            {
                billingAddresGUID = defaultBillingAddress.AddresGuid;
                order.BillToCustomer = JsonConvert.DeserializeObject<OrderCustomerRequestModel>(JsonConvert.SerializeObject(defaultBillingAddress));
                order.BillToCustomer.Email = customer.Email;
                order.BillToCustomer.UserId = customer.CustomerId;
                order.BillingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(defaultBillingAddress));
            }
            else
            {
                billingAddresGUID = Guid.NewGuid();
                order.BillToCustomer = new OrderCustomerRequestModel { FirstName = customer.FirstName, LastName = customer.LastName, Email = customer.Email, PhoneFormatted = customer.CellPhone, UserId = customer.CustomerId };
                order.BillingAddress = new OrderAddressRequestModel();
            }
        }
        else
        {
            if (defaultShippingAddress != null)
            {
                shippingAddressGUID = defaultShippingAddress.AddresGuid;
                order.ShipToCustomer = JsonConvert.DeserializeObject<OrderCustomerRequestModel>(JsonConvert.SerializeObject(defaultShippingAddress));
                order.ShipToCustomer.Email = shipToCustomer.Email;
                order.ShipToCustomer.UserId = shipToCustomer.CustomerId;
                order.ShippingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(defaultShippingAddress));
            }
            else
            {
                shippingAddressGUID = Guid.NewGuid();
                order.ShippingAddress = new OrderAddressRequestModel();
                order.ShipToCustomer = new OrderCustomerRequestModel { FirstName = shipToCustomer.FirstName, LastName = shipToCustomer.LastName, Email = shipToCustomer.Email, PhoneFormatted = shipToCustomer.CellPhone, UserId = shipToCustomer.CustomerId };
            }
        }
    }

    private async Task OnExistingCustomerSelection(SelectEventArgs<CustomCustomerModel> args)
    {
        var searchCustomersResponse = await _customerViewModel.SearchBusinessCustomers(currentMember.Id, args.ItemData.Email);
        var getSelectedCustomer = searchCustomersResponse.data.FirstOrDefault(x => x.CustomerId == args.ItemData.Id);
        if (getSelectedCustomer is not null)
        {
            customer = getSelectedCustomer;
            shipToCustomer = customer;
            addressRequestModel.Email = customer.Email;
            await ShowAddressesForCustomer(customer.UserGUID, OrderCustomerType.BillTo);
            await ShowAddressesForCustomer(customer.UserGUID, OrderCustomerType.ShipTo);
            userGuid = customer.UserGUID;
            shipToCustomerGUID = shipToCustomer.UserGUID;
            customerSelected = true;
            await productddlObj.FocusAsync();
            isSearchProductFocus = true;
        }
        else
            toastService.ShowToast("There exists some error while fetching the selected customer.", ToastLevel.Error);
    }

    private async Task EditAddress(Guid addressGuid)
    {
        SpinnerVisibility = true;
        CloseAddressModal();
        if (EditableOrderCustomerType == OrderCustomerType.BillTo)
            addressRequestModel.Email = order.BillToCustomer.Email;
        else
            addressRequestModel.Email = order.ShipToCustomer.Email;
        var customerExistenceResponse = await _customerViewModel.GetBusinessCustomerByEmail(addressRequestModel.Email);
        var reqAddress = customerAddresses.Where(x => x.AddresGuid == addressGuid).FirstOrDefault();
        if (customerExistenceResponse.success)
        {
            if (EditableOrderCustomerType == OrderCustomerType.BillTo)
                userGuid = customerExistenceResponse.data.CustomerGUID;
            else
                shipToCustomerGUID = customerExistenceResponse.data.CustomerGUID;

            addressRequestModel = JsonConvert.DeserializeObject<UserAddressRequestModel>(JsonConvert.SerializeObject(customerExistenceResponse.data));
            addressRequestModel.UserGUID = customerExistenceResponse.data.CustomerGUID;
            addressRequestModel.AddressGUID = addressGuid;
            addressRequestModel.FirstName = reqAddress.FirstName;
            addressRequestModel.LastName = reqAddress.LastName;
            addressRequestModel.Company = reqAddress.Company;
            addressRequestModel.DOB = reqAddress.DOB;
            addressRequestModel.Address1 = reqAddress.Address1;
            addressRequestModel.Address2 = reqAddress.Address2;
            addressRequestModel.AddressPhone = reqAddress.PhoneFormatted;
            addressRequestModel.AddressPhoneCountry = reqAddress.CountryCode;
            addressRequestModel.WorkPhone = reqAddress.PhoneFormatted;
            addressRequestModel.WorkPhoneCountry = reqAddress.CountryCode;
            addressRequestModel.Phone = reqAddress.PhoneFormatted;
            addressRequestModel.PhoneType = reqAddress.PhoneType;
            addressRequestModel.City = reqAddress.City;
            addressRequestModel.State = reqAddress.State;
            addressRequestModel.StateCode = reqAddress.StateCode;
            addressRequestModel.ZipCode = reqAddress.ZipCode;
            addressRequestModel.IsDefaultBilling = reqAddress.IsDefaultBilling;
            addressRequestModel.IsDefaultShipping = reqAddress.IsDefaultShipping;
            addressRequestModel.PhoneCountry = "US";
            if (reqAddress != null && !string.IsNullOrEmpty(reqAddress.Phone))
            {
                string[] splittedPhone = reqAddress.Phone.Split("| ");
                if (splittedPhone.Length > 1)
                {
                    addressRequestModel.PhoneCountry = splittedPhone[1].Trim();
                }
            }
        }
        await SetCodes();
        showPhoneControl = true;
        SpinnerVisibility = false;
        isAddAddress = false;
        IsCreateCustomerDialogVisible = true;
    }

    private async Task GetCountriesAsync()
    {
        var countriesResponse = await _countryViewModel.GetCountries();
        if (countriesResponse.success)
        {
            countries = countriesResponse.data;
        }
    }

    private async Task GetStatesAsync()
    {
        var statesResponse = await _stateViewModel.GetStates();
        if (statesResponse.success)
        {
            states = statesResponse.data;
        }
    }

    private async Task SetCodes()
    {
        if (!countries.Any())
        {
            await GetCountriesAsync();
        }
        if (!states.Any())
        {
            await GetStatesAsync();
        }
        if (!phoneMasks.Any())
        {
            phoneMasks = await http.GetFromJsonAsync<List<PhoneMask>>("PhoneMasks.json");
        }
        addressRequestModel.CountryCode = "US";
        addressRequestModel.PhoneCountry = "US";
        addressRequestModel.AddressPhoneCountry = "US";
        addressRequestModel.WorkPhoneCountry = "US";
    }

    private async Task AddNewAddress()
    {
        SpinnerVisibility = true;
        CloseAddressModal();
        addressRequestModel = new UserAddressRequestModel { CountryCode = "US" };
        if (EditableOrderCustomerType == OrderCustomerType.BillTo)
        {
            addressRequestModel.Email = customer.Email;
        }
        else
        {
            addressRequestModel.Email = shipToCustomer.Email;
        }
        var customerExistenceResponse = await _customerViewModel.GetBusinessCustomerByEmail(addressRequestModel.Email);
        if (customerExistenceResponse.success)
        {
            var customer = customerExistenceResponse.data;
            addressRequestModel.UserGUID = customer.CustomerGUID;
            addressRequestModel.FirstName = customer.FirstName;
            addressRequestModel.LastName = customer.LastName;
            addressRequestModel.DOB = customer.DOB;
            addressRequestModel.Company = customer.Company;
        }
        await SetCodes();
        showPhoneControl = true;
        SpinnerVisibility = false;
        isAddAddress = true;
        IsCreateCustomerDialogVisible = true;
    }

    private async Task AddNewCustomer()
    {
        addressRequestModel = new UserAddressRequestModel();
        await SetCodes();
        showPhoneControl = true;
        IsCreateCustomerDialogVisible = true;
        userGuid = null;
        isAddAddress = true;
        shipToCustomerGUID = null;
    }

    private async Task ValidateUser(string email)
    {
        SpinnerVisibility = true;
        addressRequestModel.Email = email;
        var customerExistenceResponse = await _customerViewModel.GetBusinessCustomerByEmail(addressRequestModel.Email);
        if (customerExistenceResponse.success)
        {
            addressRequestModel = JsonConvert.DeserializeObject<UserAddressRequestModel>(JsonConvert.SerializeObject(customerExistenceResponse.data));
            var addressesResponse = await _customerViewModel.GetCustomerAddressList(customerExistenceResponse.data.CustomerGUID);
            if (addressesResponse.success)
            {
                var reqAddress = addressesResponse.data.FirstOrDefault(x => x.Id == customerExistenceResponse.data.DefaultAddress);
                addressRequestModel.UserGUID = customerExistenceResponse.data.CustomerGUID;
                addressRequestModel.AddressGUID = reqAddress.AddresGuid;
                addressRequestModel.IsDefaultBilling = reqAddress.IsDefaultBilling;
                addressRequestModel.IsDefaultShipping = reqAddress.IsDefaultShipping;
                addressRequestModel.Phone = reqAddress.PhoneFormatted;
                if (EditableOrderCustomerType == OrderCustomerType.BillTo)
                {
                    userGuid = addressRequestModel.UserGUID;
                }
                else
                {
                    shipToCustomerGUID = addressRequestModel.UserGUID;
                }
            }
        }
        else
        {
            if (EditableOrderCustomerType == OrderCustomerType.BillTo)
            {
                userGuid = null;
            }
            else
            {
                shipToCustomerGUID = null;
            }
            addressRequestModel.UserGUID = new Guid();
        }
        SpinnerVisibility = false;
        await SetCodes();
    }

    private void ChangeShippingAddress(Guid addressGuid)
    {
        foreach (var address in customerAddresses)
        {
            if (address.AddresGuid == addressGuid)
            {
                shippingAddressGUID = addressGuid;
                order.ShipToCustomer = new OrderCustomerRequestModel { FirstName = address.FirstName, LastName = address.LastName, Email = shipToCustomer.Email, PhoneFormatted = address.PhoneFormatted, Phone = address.Phone, UserId = shipToCustomer.CustomerId };
                order.ShippingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(address));
            }
        }
        toastService.ShowToast("Shipping address updated successfully.", ToastLevel.Success);
    }

    private void ChangeBillingAddress(Guid addressGuid)
    {
        foreach (var address in customerAddresses)
        {
            if (address.AddresGuid == addressGuid)
            {
                billingAddresGUID = addressGuid;
                order.BillToCustomer = new OrderCustomerRequestModel { FirstName = address.FirstName, LastName = address.LastName, Email = customer.Email, PhoneFormatted = address.PhoneFormatted, Phone = address.Phone, UserId = customer.CustomerId };
                order.BillingAddress = JsonConvert.DeserializeObject<OrderAddressRequestModel>(JsonConvert.SerializeObject(address));
            }
        }
        toastService.ShowToast("Billing address updated successfully.", ToastLevel.Success);
    }

    private void UpdateOrderDiscountByProduct(bool isProductAdded, decimal price)
    {
        if (isProductAdded)
            order.TotalDiscounts += price;
        else
            order.TotalDiscounts -= price;
    }

    private void CalculateSalesTax()
    {
        salesTax = Math.Round(_salesTax * (ProductDataList.Where(x => x.ChargeSalesTax).Sum(x => x.ProductPrice * x.Quantity)), 2);
    }

    private void CalcualtePricesForProduct()
    {
        if (isSalesTaxApplied)
            CalculateSalesTax();
        else
            salesTax = 0;
        order.GrandTotal = salesTax + order.SubTotal + order.TotalGratuity + order.TotalShipping - order.TotalDiscounts;

        if (order.OrderTenders != null && order.OrderTenders.Any())
        {
            var tenderAmt = order.OrderTenders.Sum(x => x.Amount);
            balanceDue = order.GrandTotal - tenderAmt;
        }
        else
        {
            balanceDue = order.GrandTotal;
        }
    }

    private void IncreaseProductQty(ProductData product)
    {
        productddlObj.ClearAsync();
        product.Quantity += 1;
        order.SubTotal = order.SubTotal + product.ProductPrice;
        //products = new List<ProductListModel>();
        var discountPrice = product.ProductPrice - product.FinalPrice;
        if (discountPrice > 0)
            UpdateOrderDiscountByProduct(true, discountPrice);
        CalcualtePricesForProduct();
        //await response;
    }

    private void ReduceProductQty(bool removeCompleteProduct)
    {
        productddlObj.ClearAsync();
        if (removeProduct.Quantity == 1 || removeCompleteProduct)
        {
            ProductDataList.RemoveAll(x => x.ProductId == removeProduct.ProductId);
            products.RemoveAll(x => x.Id == removeProduct.ProductId);
            ProductsGrid.Refresh();
        }
        else
        {
            removeProduct.Quantity -= 1;
        }

        if (removeCompleteProduct)
        {
            order.SubTotal = order.SubTotal - (removeProduct.Quantity * removeProduct.ProductPrice);
        }
        else
        {
            order.SubTotal = order.SubTotal - removeProduct.ProductPrice;
        }

        var discountPrice = removeProduct.ProductPrice - removeProduct.FinalPrice;
        if (discountPrice > 0)
        {
            var discountForProductQty = removeCompleteProduct ? removeProduct.Quantity : 1;
            UpdateOrderDiscountByProduct(false, discountPrice * discountForProductQty);
        }

        CalcualtePricesForProduct();
        IsRemoveProductModalVisible = false;
        StateHasChanged();
    }

    private void ChangeOrderDeliveryType(OrderDeliveryMethod deliveryType)
    {
        if (deliveryType == OrderDeliveryMethod.Pickup || deliveryType == OrderDeliveryMethod.CarryOut)
        {
            order.TotalShipping = 0;
            shipmentDate = DateTime.Today;
            CalcualtePricesForProduct();
        }
        order.DeliveryMethod = deliveryType;
        IsFullfillmentTypeModalVisible = false;
    }

    private void ApplySalesTax()
    {
        IsChargeSalesTaxModalVisible = false;
        isSalesTaxApplied = true;
        CalcualtePricesForProduct();
        toastService.ShowToast("Sales Tax applied successfully.", ToastLevel.Success);
    }

    private void RemoveSalesTax()
    {
        IsChargeSalesTaxModalVisible = false;
        isSalesTaxApplied = false;
        CalcualtePricesForProduct();
        toastService.ShowToast("Sales Tax removed successfully.", ToastLevel.Success);
    }

    private void ApplyCashTender(decimal tenderChargeAmt)
    {
        ApplyTender(tenderChargeAmt, (int)TenderType.Cash);
    }

    private void ApplyTender(decimal tenderChargeAmt, int selectedTenderType, GiftCardDetail giftCardData = null)
    {
        if (selectedTenderType == -1)
        {
            selectedTenderType = (int)TenderType.CreditCard;
        }

        if (order.OrderTenders == null)
        {
            order.OrderTenders = new List<OrderTenderRequestModel>();
        }
        var tender = new OrderTenderRequestModel
        {
            TenderType = (TenderType)selectedTenderType,
            Amount = tenderChargeAmt,
            UserId = currentMember.Id,
            OrderId = orderId,
            CreatedDate = DateTime.UtcNow
        };
        if (selectedTenderType == (int)TenderType.Cash && tenderChargeAmt > balanceDue)
        {
            tender.Change = tenderChargeAmt - balanceDue;
        }
        if (selectedTenderType == (int)TenderType.CreditCard)
        {
            creditCard = orderTender.creditCard;
            tender.OrderTransactions = new List<OrderTransactionRequestModel>();
            var creditCardObj = new OrderTransactionRequestModel
            {
                UserId = customer.CustomerId,
                Amount = tenderChargeAmt,
                CreditCardExpMonth = creditCard.ExpirationMonth,
                CreditCardExpYear = creditCard.ExpirationYear,
                TransactionType = PaymentTransactionType.sale,
                CreditCardLastFour = creditCard.LastFourDigits,
                CreditCardToken = creditCard.CardToken,
                CreditCardType = creditCard.CardType
            };
            tender.OrderTransactions.Add(creditCardObj);
        }
        if (selectedTenderType == (int)TenderType.GiftCard && !(giftCard.BalanceAmount < tenderChargeAmt))
        {
            giftCard = giftCardData;
            giftCard.BalanceAmount -= tenderChargeAmt;
            if (order.OrderGiftCard is null)
            {
                order.OrderGiftCard = new List<OrderGiftCardRequestModel>();
            }

            var existingCheck = order.OrderGiftCard.Where(x => x.GiftCardId == giftCard.Id).FirstOrDefault();

            if (existingCheck is null)
            {
                var giftCardItem = new OrderGiftCardRequestModel
                {
                    AmountUsed = tenderChargeAmt,
                    Balance = giftCard.BalanceAmount,
                    GiftCardId = giftCard.Id,
                    GiftCardLastFour = giftCard.AccountNumber.Substring(giftCard.AccountNumber.Length - 4)
                };
                order.OrderGiftCard.Add(giftCardItem);
            }
            else
            {
                existingCheck.Balance = giftCard.BalanceAmount;
                existingCheck.AmountUsed += tenderChargeAmt;
            }
        }
        order.OrderTenders.Add(tender);

        CalcualtePricesForProduct();
        toastService.ShowToast("Tender applied successfully.", ToastLevel.Success);
    }

    private async Task<bool> UpdateOrder()
    {
        var updateOrderReq = new UpdateOrderRequestModel
        {
            Id = orderId,
            SubTotal = order.SubTotal,
            Currency = order.Currency,
            TotalTax = order.TotalTax,
            GrandTotal = order.GrandTotal,
            TotalGratuity = order.TotalGratuity,
            TeamMemberId = order.TeamMemberId,
            TotalServiceFees = order.TotalServiceFees,
            OrderType = order.OrderType,
            OrderSource = (int)order.OrderSource,
            DeliveryMethod = order.DeliveryMethod,
            ConfirmationType = order.ConfirmationType,
            TotalShipping = order.TotalShipping,
            ShippingDiscountsTotal = order.ShippingDiscountsTotal,
            TotalDuties = order.TotalDuties,
            LocationId = order.LocationId,
            OrderStatus = order.OrderStatus,
            TotalDiscounts = order.TotalDiscounts,
            OrderSalesRep = JsonConvert.DeserializeObject<List<OrderSalesRepModel>>(JsonConvert.SerializeObject(order.OrderSalesRep)),
            OrderFee = JsonConvert.DeserializeObject<List<OrderFeeModel>>(JsonConvert.SerializeObject(order.OrderFee)),
            OrderNotes = JsonConvert.DeserializeObject<List<OrderNoteModel>>(JsonConvert.SerializeObject(orderNotes)),
            BillToAddress = JsonConvert.DeserializeObject<OrderAddressModel>(JsonConvert.SerializeObject(order.BillingAddress)),
            ShipToAddress = JsonConvert.DeserializeObject<OrderAddressModel>(JsonConvert.SerializeObject(order.ShippingAddress)),
            BillToCustomer = JsonConvert.DeserializeObject<OrderCustomerModel>(JsonConvert.SerializeObject(order.BillToCustomer)),
            ShipToCustomer = JsonConvert.DeserializeObject<OrderCustomerModel>(JsonConvert.SerializeObject(order.ShipToCustomer)),
            //OrderMeta = JsonConvert.DeserializeObject<List<OrderMetaModel>>(JsonConvert.SerializeObject(order.OrderMeta)),
            OrderItems = JsonConvert.DeserializeObject<List<OrderItemUpdateRequestModel>>(JsonConvert.SerializeObject(order.OrderItems)),
            OrderFulfillment = JsonConvert.DeserializeObject<List<OrderFulfillmentModel>>(JsonConvert.SerializeObject(order.OrderFulfillment)),
            OrderDiscount = JsonConvert.DeserializeObject<List<OrderDiscountModel>>(JsonConvert.SerializeObject(order.OrderDiscount)),
            OrderTags = JsonConvert.DeserializeObject<List<OrderTagModel>>(JsonConvert.SerializeObject(order.OrderTags)),
            OrderTenders = JsonConvert.DeserializeObject<List<OrderTenderUpdateRequestModel>>(JsonConvert.SerializeObject(order.OrderTenders)),
            OrderGiftCard = JsonConvert.DeserializeObject<List<OrderGiftCardModel>>(JsonConvert.SerializeObject(order.OrderGiftCard)),
        };
        if (order.DeliveryMethod == OrderDeliveryMethod.Pickup)
        {
            updateOrderReq.FulfillmentStatus = OrderFulfillmentStatus.Fulfilled;
        }
        else
        {
            updateOrderReq.FulfillmentStatus = OrderFulfillmentStatus.NotFulfilled;
        }

        foreach (var tender in updateOrderReq.OrderTenders)
        {
            if (tender.OrderTransactions != null)
            {
                foreach (var transaction in tender.OrderTransactions)
                {
                    if (transaction.OrderId == 0)
                        transaction.OrderId = orderId;
                }
            }
        }

        var updateOrderResponse = await _orderViewModel.UpdateOrderAsync(updateOrderReq);
        if (updateOrderResponse.success)
        {
            submittedOrderNum = updateOrderResponse.data.OrderNumber;
            submittedOrderPrefix = updateOrderResponse.data.OrderPreFix;
            submittedOrderGUID = updateOrderResponse.data.OrderGuid;
            toastService.ShowToast(Constants.UpdateMessage, ToastLevel.Success);
            return true;
        }
        else
        {
            toastService.ShowToast(updateOrderResponse.error_info.description, ToastLevel.Error);
            return false;
        }
    }

    private async Task<bool> HandleOrderSubmit()
    {
        IsOrderSubmissionStateModalVisible = true;
        if (orderId == 0 && order.OrderStatus == OrderStatus.Suspended)
        {
            IsOrderSubmissionStateModalVisible = false;
        }
        else if (orderId == 0 && order.OrderStatus != OrderStatus.Suspended)
        {
            orderNotes.RemoveAll(x => x.NoteType == (int)OrderNote.Private);
        }

        order.OrderItems = new List<OrderItemRequestModel>();
        foreach (var item in ProductDataList)
        {
            var orderItem = new OrderItemRequestModel { Quantity = item.Quantity, ProductId = item.ProductId, OrderItemType = item.ProductType, ProductName = item.ProductName, ProductPrice = item.FinalPrice, AccountNumber = item.AccountNumber, GiftCardType = item.GiftCardType, DesignImage = item.DesignImageName, Taxable = item.ChargeSalesTax };
            if (item.ProductType == (int)ProductTypeEnum.GiftCard)
            {
                orderItem.ProductName = orderItem.ProductName + $"({item.AccountNumber} - {((orderItem.GiftCardType > 0) ? EnumHelper.GetDescription(GiftCardsType.Physical) : EnumHelper.GetDescription(GiftCardsType.Digital))})";
            }
            order.OrderItems.Add(orderItem);
        }
        order.BusinessId = currentMember.Id;
        order.TeamMemberId = loggedInUser.Id;
        order.OrderSource = OrderSource.OMS;
        order.LocationId = omsSetting.LocationId;
        order.Currency = orderCurrencySymbol;
        order.TotalGratuity = bindedGratuity;
        order.TotalTax = salesTax;
        if ((balanceDue <= 0 && order.OrderStatus != OrderStatus.Suspended) || (orderId > 0 && order.OrderStatus == OrderStatus.Suspended))
        {
            order.OrderStatus = OrderStatus.Completed;
        }

        switch (order.DeliveryMethod)
        {
            case (OrderDeliveryMethod.Ship):
                order.LocationId = omsSetting.InventoryShipLocation;
                break;
            case (OrderDeliveryMethod.CarryOut):
                order.LocationId = omsSetting.InventoryCarryOutLocation;
                break;
            case (OrderDeliveryMethod.Pickup):
                order.LocationId = omsSetting.InventoryPickupLocation;
                break;
            case (OrderDeliveryMethod.Delivery):
                order.LocationId = omsSetting.InventoryDeliveryLocation;
                break;
        }

        foreach (var fulfillment in order.OrderFulfillment)
        {
            fulfillment.FulfillmentType = (int)order.DeliveryMethod;

            switch (order.DeliveryMethod)
            {
                case (OrderDeliveryMethod.Pickup):
                    fulfillment.FulfillmentStatus = (int)OrderFulfillmentStatus.NotFulfilled;
                    break;
                case (OrderDeliveryMethod.CarryOut):
                    fulfillment.FulfillmentStatus = (int)OrderFulfillmentStatus.Fulfilled;
                    break;
                case (OrderDeliveryMethod.Ship):
                    fulfillment.FulfillmentStatus = (int)OrderFulfillmentStatus.NotFulfilled;
                    break;
                case (OrderDeliveryMethod.Delivery):
                    fulfillment.FulfillmentStatus = (int)OrderFulfillmentStatus.NotFulfilled;
                    break;
            }

        }
        order.OrderSalesRep = new List<OrderSalesRepRequestModel>();
        foreach (var salesRep in bindedSalesReps)
        {
            order.OrderSalesRep.Add(new OrderSalesRepRequestModel { UserId = salesRep });
        }
        order.OrderTags = new List<OrderTagRequestModel>();
        foreach (var orderTag in bindedTags)
        {
            order.OrderTags.Add(new OrderTagRequestModel { Value = orderTag });
        }
        order.OrderNotes = new List<OrderNoteRequestModel>();
        if (order.DeliveryMethod != OrderDeliveryMethod.Ship)
        {
            orderNotes.RemoveAll(x => x.NoteType == (int)OrderNote.Shipping);
        }

        foreach (var orderNote in orderNotes)
        {
            var reqNote = JsonConvert.DeserializeObject<OrderNoteRequestModel>(JsonConvert.SerializeObject(orderNote));
            order.OrderNotes.Add(reqNote);
        }
        if (order.DeliveryMethod == OrderDeliveryMethod.Pickup || order.DeliveryMethod == OrderDeliveryMethod.CarryOut)
        {
            order.ShippingAddress = null;
            order.ShipToCustomer = null;
        }

        if (orderId > 0)
        {
            return await UpdateOrder();
        }
        else
        {
            var submitOrderResponse = await _orderViewModel.CreateOrderAsync(order);
            if (submitOrderResponse.success)
            {
                orderId = submitOrderResponse.data.Id;
                submittedOrderNum = submitOrderResponse.data.OrderNumber;
                submittedOrderPrefix = submitOrderResponse.data.OrderPreFix;
                submittedOrderGUID = submitOrderResponse.data.OrderGuid;
                toastService.ShowToast("Order submitted successfully.", ToastLevel.Success);
                return true;
            }
            else
            {
                toastService.ShowToast(submitOrderResponse.error_info.description, ToastLevel.Error);
                return false;
            }
        }
    }

    private async Task SubmitOrder()
    {
        if (order.DeliveryMethod == OrderDeliveryMethod.Ship && !IsShipToAddressAdded())
        {
            infoModel = new DisplayInfoModal
            {
                HeaderText = "Customer Information Required",
                ContentMessage = "To submit a Ship to Customer order, you must first attach a Ship To Customer and attach a Shipping Address."
            };
            infoModalVisible = true;
            return;
        }
        //else if (order.DeliveryMethod == OrderDeliveryMethod.Pickup && !IsBillToAddressAdded())
        //{
        //    infoModel = new DisplayInfoModal
        //    {
        //        HeaderText = "Customer Information Required",
        //        ContentMessage = "To submit a Customer Pickup order, you must first attach a Bill To Customer and attach a Billing Address."
        //    };
        //    infoModalVisible = true;
        //    return;
        //}
        else if (balanceDue > 0)
        {
            infoModel = new DisplayInfoModal
            {
                HeaderText = "Full payment is required",
                ContentMessage = "To submit an Order, please make sure all the payment is paid in full."
            };
            infoModalVisible = true;
            return;
        }
        else if (submittedOrderNum > 0)
        {
            infoModel = new DisplayInfoModal
            {
                HeaderText = "Order submit failed",
                ContentMessage = "To submit an Order, please create a new order as update order is not possible."
            };
            infoModalVisible = true;
            return;
        }
        else
        {
            var orderSubmitted = await HandleOrderSubmit();
            if (!orderSubmitted)
                hideOrderSubmitModal = true;
            StateHasChanged();
        }
    }

    private async Task HandlePostSuspendedOrder()
    {
        IsOrderSubmissionStateModalVisible = false;
        order = new OrderRequestModel { OrderTenders = new List<OrderTenderRequestModel>(), OrderFulfillment = new List<OrderFulfillmentRequestModel> { new OrderFulfillmentRequestModel() } };
        order.DeliveryMethod = OrderDeliveryMethod.Ship;
        order.OrderStatus = OrderStatus.ShoppingCart;
        orderNotes = new List<CustomOrderNoteModel>();
        customerSelected = false;
        customers = new List<CustomCustomerModel>();
        customerAddresses = new List<UserAddressModel>();
        ProductDataList = new List<ProductData>();
        products = new List<ProductListModel>();
        tags = new List<CustomTagModel>();
        orderTags = new string[] { };
        bindedTags = new string[] { };
        balanceDue = 0;
        shipmentDate = DateTime.Today;
        salesReps = new int[] { };
        bindedSalesReps = new int[] { };
        isSalesTaxApplied = true;
        salesTax = 0;
        bindedShippingCharge = 0;
        bindedShippingDate = DateTime.Today;
        reqShipmentDate = DateTime.Today;
        submittedOrderNum = 0;
        orderId = 0;
        await productddlObj.ClearAsync();
        StateHasChanged();
    }

    private void ViewOrder()
    {
        NavigationManager.NavigateTo($"/store/orders/order/{submittedOrderGUID}");
    }

    private async Task SearchProducts(Microsoft.AspNetCore.Components.ChangeEventArgs args)
    {
        var searchVal = args.Value.ToString();
        await GetSearchedProducts(searchVal);
    }

    private void RowSelectHandler(RowSelectEventArgs<ProductListModel> args)
    {

    }

    private void RowDeselectHandler(RowDeselectEventArgs<ProductListModel> args)
    {
    }

    private async Task AddSearchedProductsToCart()
    {
        IsSearchProductModalVisibile = false;
        var selectedProducts = await SearchProductsGrid.GetSelectedRecordsAsync();
        await SearchProductsGrid.ClearRowSelectionAsync();
        foreach (var product in selectedProducts)
        {
            await AddSearchProductToOrder(product);
        }
        products = new List<ProductListModel>();
        var toastVal = (selectedProducts.Count > 1) ? "Items" : "Item";
        toastService.ShowToast($"{toastVal} Added to Cart successfully", ToastLevel.Success);
    }

    private async Task AddQuickChargeItem(decimal itemPrice)
    {
        var quickchargeProduct = new ProductData
        {
            ProductId = omsSetting.QuickChargeProduct.Value,
            ProductName = "Quick Charge Product",
            ProductSku = omsSetting.QuickChargeProductSku,
            Quantity = 1,
            FinalPrice = itemPrice,
            Extended = itemPrice,
            ProductImage = omsSetting.QuickChargeProductImage,
            ProductGuid = omsSetting.QuickChargeProductGUID,
            ProductPrice = itemPrice
        };

        await ProductsGrid.AddRecordAsync(quickchargeProduct);
        order.SubTotal += itemPrice;
        CalcualtePricesForProduct();
        IsQuickChargeModalVisible = false;
        toastService.ShowToast("Quick Charge Item Added successfully.", ToastLevel.Success);
    }

    private bool IsShipToAddressAdded()
    {
        var isAdded = false;
        if (shipToCustomerGUID != Guid.Empty && (order.ShippingAddress != null && !string.IsNullOrEmpty(order.ShippingAddress.Address1)))
            isAdded = true;

        return isAdded;
    }

    private bool IsBillToAddressAdded()
    {
        var isAdded = false;
        if (userGuid != Guid.Empty && (order.BillingAddress != null && !string.IsNullOrEmpty(order.BillingAddress.Address1)))
            isAdded = true;

        return isAdded;
    }

    #region Gift Cards
    private async Task GetGiftCard()
    {
        isValidGiftCard = false;
        isCustomGiftCard = false;
        getGiftCardForm.EditContext.Validate();
        if (getGiftCardForm.EditContext.Validate())
        {
            getGiftCard.GiftCardNumber = GiftCardMask.GetMaskedValue();
            if (ProductDataList.Any(x => x.AccountNumber == getGiftCard.GiftCardNumber))
            {
                toastService.ShowToast("Gift Card item is already added", ToastLevel.Error);
            }
            else
            {
                var getGiftCardResponse = await _productViewModel.GetNewBusinessGiftCardByAccountNumber(getGiftCard.GiftCardNumber, currentMember.Id);
                if (getGiftCardResponse.success)
                {
                    var giftCard = getGiftCardResponse.data;
                    if (giftCard.UseRangeValue)
                    {
                        applicableGiftCard.FinalPrice = giftCard.AmountMax;
                        applicableGiftCard.ProductPrice = giftCard.Amount;
                    }
                    else
                    {
                        applicableGiftCard.FinalPrice = giftCard.Amount;
                        applicableGiftCard.ProductPrice = giftCard.Amount;
                    }
                    applicableGiftCard.AccountNumber = giftCard.AccountNumber;
                    //applicableGiftCard.FinalPrice = giftCard.BalanceAmount;
                    //applicableGiftCard.ProductPrice = giftCard.BalanceAmount;
                    isValidGiftCard = true;
                    isCustomGiftCard = giftCard.UseRangeValue;
                }
                else
                {
                    toastService.ShowToast(getGiftCardResponse.error_info.description, ToastLevel.Error);
                }
            }
        }
    }

    private async Task SaveGiftCardToOrder()
    {
        applicableGiftCard.ProductPrice = applicableGiftCard.FinalPrice;
        if (selectedGiftCardDesign > 0)
        {
            var reqDesign = giftCardsDesigns.Where(x => x.Id == selectedGiftCardDesign).FirstOrDefault();
            if (reqDesign is not null)
            {
                applicableGiftCard.ProductImage = _synergyAppSettings.Value.SynergyCDNBaseUrl + "business/photos/gift-cards/" + reqDesign.DesignImageName;
                applicableGiftCard.DesignImageName = reqDesign.DesignImageName;
            }
        }
        else
        {
            applicableGiftCard.GiftCardType = (int)GiftCardsType.Physical;
        }
        await ProductsGrid.AddRecordAsync(applicableGiftCard);
        order.SubTotal = order.SubTotal + applicableGiftCard.FinalPrice;
        CalcualtePricesForProduct();
        ProductsGrid.Refresh();
        IsPurchaseGiftCardToOrderModalVisible = false;
        toastService.ShowToast("Gift Card item added successfully.", ToastLevel.Success);
    }

    private async Task ClosePurchaseGiftCardModal()
    {
        await productddlObj.ClearAsync();
        IsPurchaseGiftCardToOrderModalVisible = false;
        // IsSelectGiftCardTypeModalVisible = false;
        IsSelectGiftCardDesignModalVisible = false;
    }

    private void DisplayGiftCardValidationModal(int giftCardDesignId)
    {
        IsSelectGiftCardDesignModalVisible = false;
        IsSelectGiftCardTypeModalVisible = false;
        selectedGiftCardDesign = giftCardDesignId;
        isValidGiftCard = false;
        IsPurchaseGiftCardToOrderModalVisible = true;
        getGiftCard = new CustomGetGiftCardModel();
    }

    private async Task DisplayGiftCardDesigns()
    {
        var getGiftCardDesignsResponse = await _productViewModel.GetGiftCardDesignsByProduct(applicableGiftCard.ProductId);
        if (getGiftCardDesignsResponse.success)
        {
            giftCardsDesigns = getGiftCardDesignsResponse.data.OrderBy(x => x.DesignTitle).ToList();
            IsSelectGiftCardTypeModalVisible = false;
            IsSelectGiftCardDesignModalVisible = true;
        }
    }

    private void DisplaySelectGiftCardTypeModal()
    {
        IsPurchaseGiftCardToOrderModalVisible = false;
        IsSelectGiftCardTypeModalVisible = true;
    }
    #endregion Gift Cards

    #region Discounts
    // model to handle the discount features at the OMS level
    private class CustomDiscountModel
    {
        public int Id { get; set; }
        public Guid IdGUID { get; set; }
        public string DiscountName { get; set; }
        public DiscountType DiscountType { get; set; }
        public string DiscountCode { get; set; }
    }

    private void HandleProductDiscountsModal(ProductData product)
    {
        if (product.ExcludeDiscounts)
        {
            applyManualDiscountModel = new ApplyManualDiscountModel { ProductName = product.ProductName };
            IsDiscountsNotAllowedModalVisible = true;
        }
        else
        {
            applyManualDiscountModel = new ApplyManualDiscountModel { Amount = 20, DiscountType = DiscountType.Amount, DiscountProductId = product.ProductId, AvailableAmt = product.FinalPrice };
            IsManualDiscountsModalVisible = true;
        }
    }

    private void ApplyManualDiscount()
    {
        foreach (var product in ProductDataList)
        {
            if (product.ProductId == applyManualDiscountModel.DiscountProductId)
            {
                var initialPrice = product.FinalPrice;
                if (applyManualDiscountModel.DiscountType == DiscountType.Amount)
                    product.FinalPrice -= applyManualDiscountModel.Amount;
                else
                    product.FinalPrice = Math.Round(product.FinalPrice * (100 - applyManualDiscountModel.Amount) / 100, 2);
                order.TotalDiscounts = order.TotalDiscounts + (initialPrice - product.FinalPrice);
                CalcualtePricesForProduct();
                toastService.ShowToast("Discount applied successfully.", ToastLevel.Success);
            }
        }
        IsManualDiscountsModalVisible = false;
    }

    private async Task ApplyPromoCode()
    {
        IsPromoModalVisible = false;
        var promoCode = businessDiscounts.FirstOrDefault(x => x.Id == applicablePromoCode.Id);
        var getPromoCode = await _discountViewModel.GetDiscountDetail(promoCode.IdGUID.ToString());
        if (getPromoCode.success)
        {
            var promoCodeDetails = getPromoCode.data;
            if (promoCodeDetails.ApplyOncePerOrder)
            {
                if (order.OrderDiscount != null && order.OrderDiscount.Any(x => x.Code == promoCode.DiscountCode))
                {
                    infoModel = new DisplayInfoModal
                    {
                        HeaderText = "Promo Code can't be applied to the order",
                        ContentMessage = $"Promo code {promoCodeDetails.DiscountCode} is only applicable once per an order"
                    };
                    infoModalVisible = true;
                    return;
                }
            }
            if (promoCodeDetails.MinPurchaeTotal > 0)
            {
                if (order.GrandTotal < promoCodeDetails.MinPurchaeTotal)
                {
                    infoModel = new DisplayInfoModal
                    {
                        HeaderText = "Promo Code can't be applied to the order",
                        ContentMessage = $"Promo code {promoCodeDetails.DiscountCode} is only applicable for purchases over {promoCodeDetails.MinPurchaeTotal.ToString("c2")}"
                    };
                    infoModalVisible = true;
                    return;
                }
            }
            if (promoCodeDetails.MinItemQty > 0)
            {
                if (ProductDataList == null || ProductDataList.Count() < promoCodeDetails.MinItemQty)
                {
                    infoModel = new DisplayInfoModal
                    {
                        HeaderText = "Promo Code can't be applied to the order",
                        ContentMessage = $"Promo code {promoCodeDetails.DiscountCode} is only applicable for orders with minimum of {promoCodeDetails.MinItemQty} item's "
                    };
                    infoModalVisible = true;
                    return;
                }
            }
            if (order.OrderDiscount is null)
                order.OrderDiscount = new List<OrderDiscountRequestModel>();

            var applicableOrderDiscount = JsonConvert.DeserializeObject<OrderDiscountRequestModel>(JsonConvert.SerializeObject(promoCodeDetails));
            applicableOrderDiscount.DiscountType = (int)promoCodeDetails.DiscountType;
            applicableOrderDiscount.Code = promoCodeDetails.DiscountCode;
            if (promoCodeDetails.DiscountType == DiscountType.Percent)
            {
                if (promoCodeDetails.DiscountPercent == 100)
                    order.TotalDiscounts = order.SubTotal;
                else
                    order.TotalDiscounts += Math.Round(order.SubTotal * (promoCodeDetails.DiscountPercent) / 100, 2);
                applicableOrderDiscount.DiscountAmount = promoCodeDetails.DiscountPercent;
            }
            else if (promoCodeDetails.DiscountType == DiscountType.Amount)
                order.TotalDiscounts += promoCodeDetails.DiscountAmount;
            order.OrderDiscount.Add(applicableOrderDiscount);
            CalcualtePricesForProduct();
            toastService.ShowToast("Promo code applied successfully", ToastLevel.Success);
        }
        else
        {
            toastService.ShowToast("There is some error applying the selected promo code, please try later", ToastLevel.Error);
        }
    }

    private void RemovePromoCode(OrderDiscountRequestModel promoCode)
    {
        order.OrderDiscount.Remove(promoCode);
        if (promoCode.DiscountType == (int)DiscountType.Percent)
        {
            if (promoCode.DiscountAmount == 100)
                order.TotalDiscounts -= order.SubTotal;
            else
                order.TotalDiscounts -= Math.Round(order.SubTotal * (promoCode.DiscountAmount) / 100, 2);
        }
        else if (promoCode.DiscountType == (int)DiscountType.Amount)
            order.TotalDiscounts -= promoCode.DiscountAmount;
        CalcualtePricesForProduct();
        toastService.ShowToast("Promo code removed successfully", ToastLevel.Success);
    }

    #endregion Discounts

}

<style>
    .productDetail .e-dlg-header {
        display: flex;
        justify-content: space-between;
        width: 100%;
    }

    .fulfillmentType .e-dlg-content {
        padding: 0px !important;
    }

    #addNewCustomerBtn, #productDetailClose {
        float: right;
    }

    #submitOrderBtn {
        border-radius: 6px;
    }

    .charge-action {
        font-size: x-large;
        padding: 55px;
        padding-left: 12%;
        padding-right: 12%;
    }

    .quick-charge-val {
        padding: 25px;
        padding-left: 14%;
        padding-right: 13%;
    }

    #quick-charge-result {
        text-align: right;
        margin-top: 3px;
        font-size: 20px
    }

    .charge-val {
        padding: 25px;
        padding-left: 12%;
        padding-right: 12%;
    }

    .quick-charge-border {
        border: 1px solid lightgray;
        border-radius: 0px;
        border-collapse: collapse;
    }

    #quick-charge-add-btn {
        color: #FFA500;
    }

    #quick-charge-modal {
        top: 20% !important
    }

    .giftCardDesignDetail {
        color: grey;
        font-size: 14px
    }
</style>