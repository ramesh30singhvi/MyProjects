@page "/reset-password/{Key}"
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Enums
@using CellarPassAppAdmin.Shared.Models.RequestModel
@inject NavigationManager _navigationManager
@inject ILoginViewModel _loginViewModel
@inject ToastService toastService

<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<EditForm Model="@resetPassword" Context="formContext">
    <DataAnnotationsValidator />
    <div class="row min-vh-100 flex-center g-0 @(ContentDisable ? "disabled-div" : "")">
        <div class="col-lg-8 col-xxl-6 py-3 position-relative">
            <div class="card overflow-hidden z-index-1">
                <div class="card-body p-0">
                    <div class="row g-0 h-100">
                        <div class="col-md-5 text-center bg-primary">
                            <div class="position-relative p-4 pt-md-5 pb-md-4">

                                <div class="z-index-1 position-relative">
                                    <img class="mb-4" src="https://cdn.cellarpass.com/static/images/cellarpass-logo-white.svg" alt="CellarPass Fox" width="180">

                                    <div class="mt-4">
                                        <h5 class="text-white mb-4">Technical Support</h5>
                                        <p class="text-white mb-1"><a href="http://cellarpass.freshdesk.com/" class="link-light">Submit Ticket</a></p>
                                        <p class="text-white mb-1"><a href="tel:(855) 423-4448" class="link-light">(855) 423-4448</a></p>
                                        <p class="text-white mb-1"><a href="https://www.cellarpass.com/profile/cellarpass-training" class="link-light">Schedule Training</a></p>
                                    </div>
                                </div>
                            </div>
                            <div class="mt-3 mb-4 mt-md-4 mb-md-5">
                                <p class="text-white">Don't have an account?<br><a class="text-decoration-underline link-light" href="https://www.cellarpass.com/business/cellarpass-subscription-plans">Get Started!</a></p>
                            </div>
                        </div>

                        <div class="col-md-7 d-flex flex-center @(!ResetPasswordSectionVisibility ? "displayNone" : "")">
                            <div class="p-4 p-md-5 flex-grow-1">
                                <div class="text-center text-md-start">
                                    <h3>Reset your Password</h3>
                                </div>
                                <div class="row justify-content-center">
                                    <div class="col-sm-12 col-md">
                                        <div class="mb-3">
                                            <label class="form-label" for="card-password">Enter New Password</label>
                                            <input class="form-control" @bind-value="resetPassword.Password" type="password" placeholder="New Password" />
                                            <ValidationMessage For="@(() => resetPassword.Password)" />
                                        </div>
                                        <div class="mb-3">
                                            <label class="form-label" for="card-password">Re-Enter New Password</label>
                                            <input class="form-control" @bind-value="resetPassword.ConfirmPassword" type="password" placeholder="Confirm New Password" />
                                            <ValidationMessage For="@(() => resetPassword.ConfirmPassword)" />
                                        </div>
                                        <div class="mb-3 text-end">
                                            <a href="login" type="button" class="btn btn-secondary mt-3">Cancel</a>
                                            <button class="btn btn-primary btn-block mt-3" @onclick="@(() => OnClickPost(formContext))">Next</button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-7 d-flex flex-center @(ResetPasswordSectionVisibility ? "displayNone" : "")">
                            <div class="p-4 p-md-5 flex-grow-1">
                                <div class="text-center text-md-start">
                                    <h3>
                                        Access to Your Account Restored
                                    </h3>
                                </div>
                                <div class="text-center text-md-start mt-2">
                                    <p>Your password change request has been successfully completed.</p>
                                    <p>You may now access your business account by clicking Login.</p>
                                </div>
                                <div class="mb-3 text-end">
                                    <button @onclick="OnClickLogin" disabled="@LoginBtnDisable" class="btn btn-primary btn-block mt-6" name="logIn">Log In</button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="text-end fs--2 mt-2">
                &copy;@DateTime.Now.Year  All Rights Reserved. CellarPass&reg; is a registered trademark of CellarPass, Inc. 
            </div>
        </div>
    </div>
</EditForm>
<Toast></Toast>

@code {
    [Parameter]
    public string Key { get; set; }
    private bool ResetPasswordSectionVisibility = true;
    private bool ContentDisable = true;
    private bool LoginBtnDisable = true;
    private bool SpinnerVisibility = false;
    ResetPasswordRequestModel resetPassword = new ResetPasswordRequestModel();
    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(Key))
        {
            toastService.ShowToast("You are trying with a wrong link, please try again.", ToastLevel.Error);
            await RedirectToForgotPassword();
        }
        else
        {
            SpinnerVisibility = true;
            var response = await _loginViewModel.GetUserByPasswordChangeKey(Key);
            SpinnerVisibility = false;
            if (response?.data == null)
            {
                toastService.ShowToast("You are trying with a wrong link, please try again.", ToastLevel.Error);
                await RedirectToForgotPassword();
            }
            else
            {
                if (response.data.PasswordChangeRequestTime == null
                    || response.data.PasswordChangeRequestTime.Value.AddMinutes(15) < DateTime.UtcNow)
                {
                    toastService.ShowToast("Your reset password link has expired, please try again.", ToastLevel.Error);
                    await RedirectToForgotPassword();
                }
                else
                {
                    ContentDisable = false;
                }
            }
        }
    }
    private async Task OnClickPost(EditContext editContext)
    {
        if (editContext.Validate())
        {
            if (resetPassword.Password != resetPassword.ConfirmPassword)
            {
                toastService.ShowToast("Your passwords did not match. Try again.", ToastLevel.Error);
                return;
            }
            else
            {
                SpinnerVisibility = true;
                var response = await _loginViewModel.UpdateUserPassword(new UpdatePasswordRequestModel
                {
                    NewPassword = resetPassword.Password,
                    PasswordChangeKey = Key
                });
                SpinnerVisibility = false;
                if (response.success)
                {
                    toastService.ShowToast("Password changed successfully.", ToastLevel.Success);
                    LoginBtnDisable = false;
                    ResetPasswordSectionVisibility = false;
                }
                else
                {
                    toastService.ShowToast(response.error_info.description, ToastLevel.Error);
                }
            }
        }
    }
    private async Task OnClickLogin()
    {
        _navigationManager.NavigateTo("/");
    }
    private async Task RedirectToForgotPassword()
    {
        await Task.Delay(1000);
        _navigationManager.NavigateTo("/forgot-password");
    }
}