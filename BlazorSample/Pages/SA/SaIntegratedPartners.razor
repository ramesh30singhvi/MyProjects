@page "/sa/business/integrated-partners"
@layout SaLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Client.ViewModels.SA
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using CellarPassAppAdmin.Shared.Enums;
@inject IMemberViewModel _memberViewModel
@inject ILoginViewModel _loginViewModel
@inject ITicketViewModel _ticketViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ILocalStorageService localStorage
@inject ISaIntegrationPartnerViewModel _saIntegrationPartnerViewModel
@inject ToastService toastService
@attribute [Authorize]

<Title Value="@title"></Title>
<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>

<div class="py-3">
    <div class="row justify-content-between">
        <div class="col-md-auto">
            <h5 class="mb-0"><a href="sa/business" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="fa-regular fa-plug me-2"></span>Integrated Partners</h5>
        </div>
        <div class="col-md-auto">
            <a class="btn btn-sm btn-primary" href="sa/business/integrated-partners-create">Add New</a>
        </div>
    </div>
    <hr />
</div>
<div class="vh-75 p-0 sf-grid">
        <SfGrid DataSource="@integrationPartners" AllowPaging="false" Width="100%" Height="100%">
            <GridColumns>
                <GridColumn HeaderText="COMPANY">
                    <Template>
                        @{
                            var company = (context as IntegrationPartnerModel).Company;
                            var partnerGUID = (context as IntegrationPartnerModel).PartnerGUID;
                            <a href="sa/business/integrated-partners-edit/@($"{partnerGUID}")">@($"{company}")</a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(IntegrationPartnerModel.AppName) HeaderText="App Name"></GridColumn>
                <GridColumn Field=@nameof(IntegrationPartnerModel.Categories) HeaderText="CATEGORIES"></GridColumn>
                <GridColumn HeaderText="CONTACT NAME">
                    <Template>
                        @{
                            var firstName = (context as IntegrationPartnerModel).FirstName;
                            var lastName = (context as IntegrationPartnerModel).LastName;
                            <span>@firstName @lastName</span>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(IntegrationPartnerModel.PhoneFormatted) HeaderText="CONTACT PHONE" Width="140"></GridColumn>
                <GridColumn HeaderText="" TextAlign="TextAlign.Right" Width="80">
                    <Template Context="context">
                        @{
                            var partnerModel = (context as IntegrationPartnerModel);
                            <div class="font-sans-serif position-static d-inline-block">
                                <button class="btn btn-link text-600 btn-sm dropdown-toggle btn-reveal float-end" type="button" id="dropdown0" data-bs-toggle="dropdown" data-boundary="window" aria-haspopup="true" aria-expanded="false"><span class="fas fa-ellipsis-h fs--1"></span></button>
                                <div class="dropdown-menu dropdown-menu-end border py-2" aria-labelledby="dropdown0">
                                    <a class="dropdown-item text-danger" @onclick="()=>OpenDeleteDialog(partnerModel.PartnerGUID)" href="javascript:void(0)">Delete</a>
                                </div>
                            </div>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

@*Delete confimation dialog*@
<DeleteConfirmation OpenDeleteDialog="DeleteDialogVisibility" OnDialogClose="CloseDeleteDialog" OnDeleteConfirmed="DeleteConfirmation"></DeleteConfirmation>

@code
{
    private bool SpinnerVisibility { get; set; } = false;
    private string title = "Integrated Partners | Synergy Commerce Admin Panel";
    private bool DeleteDialogVisibility { get; set; } = false;
    List<IntegrationPartnerModel> integrationPartners = new List<IntegrationPartnerModel>();
    Guid? idForDelete = null;

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisibility = true;
        //Get Inegrated Partners
        var response = await _saIntegrationPartnerViewModel.GetIntegrationPartnerListAsync();
        integrationPartners = response?.data ?? new List<IntegrationPartnerModel>();
        SpinnerVisibility = false;
    }

    /// <summary>
    /// Close dialog
    /// </summary>
    private void CloseDeleteDialog() => DeleteDialogVisibility = false;

    /// <summary>
    /// Open dialog for delete a tag
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private async Task OpenDeleteDialog(Guid id)
    {
        DeleteDialogVisibility = true;
        idForDelete = id;
    }
    /// <summary>
    /// Delete Tag after confirmation
    /// </summary>
    /// <returns></returns>
    private async Task DeleteConfirmation()
    {
        SpinnerVisibility = true;
        var response = await _saIntegrationPartnerViewModel.DeleteIntegrationPartnerAsync(idForDelete.Value);
        DeleteDialogVisibility = false;
        if (response.success)
        {
            toastService.ShowToast(Constants.DeleteMessage, ToastLevel.Success);
            integrationPartners = response.data;
        }
        else
        {
            toastService.ShowToast(response.error_info.description, ToastLevel.Error);
        }
        SpinnerVisibility = false;
        StateHasChanged();
    }
}

