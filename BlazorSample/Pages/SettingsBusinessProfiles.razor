@page "/settings/business-profiles"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using Syncfusion.Blazor.Popups
@using CellarPassAppAdmin.Shared.Services
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Enums
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System
@using System.Collections.Generic
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ILocalStorageService localStorage
@inject IBusinessPropertyViewModel _businessPropertyViewModel
@inject ToastService toastService
@attribute [Authorize]


<Title Value="@title"></Title>
<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<div class="card shadow-none border">
    <div class="card-header border-bottom">
        <div class="row justify-content-between align-items-center">
            <div class="col-md">
                <h5 class="mb-0"><a href="settings" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="far fa-shop me-2"></span>Business Profiles</h5>
            </div>

            <div class="col-auto">
                <a href="/settings/business-profiles/create" class="btn btn-sm btn-primary">Add Profile</a>
            </div>
        </div>
    </div>
    <div class="card-body min-vh-50 p-0 sf-grid">
        <SfGrid DataSource="@BusinessProfiles" AllowPaging="false" Width="100%" class="border-x-0">
            <GridColumns>
                <GridColumn HeaderText="Profile Name" TextAlign="TextAlign.Left" Width="200">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as BusinessPropertyModel);
                            <a href="settings/business-profiles/@profile.PropertyGuid">@profile.PropertyName</a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Address" Type="ColumnType.String" TextAlign="TextAlign.Left" Width="300">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as BusinessPropertyModel);
                            @(profile.Address)
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" TextAlign="TextAlign.Right" Width="50">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as BusinessPropertyModel);
                            <button class="delete_icon" @onclick="()=>DeleteDialogOpen(profile.Id)">
                                <span class="far fa-trash-alt"></span>
                            </button>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>

    </div>
</div>

<DeleteConfirmation OpenDeleteDialog="openDeleteDialog" OnDialogClose="DialogClose" OnDeleteConfirmed="()=>DeleteBusinessProfile(idForDelete)"></DeleteConfirmation>

@code
{

    bool openDeleteDialog = false;
    private string title = "Business Profiles | Synergy Commerce Admin Panel";
    Member currentMember = null;

    int idForDelete = 0;
    List<BusinessPropertyModel> BusinessProfiles { get; set; }
    public bool SpinnerVisibility = true;

    DeleteConfirmation DeleteConfirmation;

    protected override async Task OnInitializedAsync()
    {

        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();
        BusinessProfiles = await _businessPropertyViewModel.GetBusinessProperties(currentMember.Id);
        SpinnerVisibility = false;
    }


    private void DialogClose() => openDeleteDialog = false;

    private void DeleteDialogOpen(int id)
    {
        openDeleteDialog = true;
        idForDelete = id;
    }

    private async Task DeleteBusinessProfile(int id)
    {
        openDeleteDialog = false;
        SpinnerVisibility = true;
        BusinessProfiles = await _businessPropertyViewModel.DeleteBusinessProperty(currentMember.Id, id);
        SpinnerVisibility = false;
        toastService.ShowToast(Constants.RemoveMessage, ToastLevel.Success);
    }

    public class BusinessProfilePlaceholder
    {
        public int Id { get; set; }
        public string ProfileGuid { get; set; }
        public string ProfileName { get; set; }
        public string Address { get; set; }
    }

}