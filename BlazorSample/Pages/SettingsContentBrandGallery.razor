@page "/settings/content/brand/gallery"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Shared.Services
@*@using CellarPassAppAdmin.Client.ViewModels*@
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using Syncfusion.Blazor.Spinner
@using CellarPassAppAdmin.Shared.Enums
@*@inject IBusinessViewModel _businessViewModel*@
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ILocalStorageService localStorage
@inject IBusinessGalleryViewModel _businessGalleryViewModel
@inject IBusinessPropertyViewModel _businessPropertyViewModel
@inject ToastService toastService
@attribute [Authorize]

<AuthorizeView>
    <Authorized>
        <Title Value="@title"></Title>
        <SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>

        <div class="card mb-3">
            <div class="card-header border-bottom">
                <div class="row justify-content-between align-items-center">
                    <div class="col-md">
                        <h5 class="mb-3 mb-md-0"><a href="settings/content/brand" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="far fa-images me-2"></span>Gallery Images</h5>
                    </div>
                    <div class="col-auto col-md-3 d-flex  mb-2 mb-md-0">
                        <SfDropDownList id=sfLocationAddress TValue="int" @bind-Value="@propertyId"
                                        TItem="BusinessPropertyModel" Placeholder="Select Business Profile" AllowFiltering="true"
                                        DataSource="@BusinessProfiles">
                            <DropDownListEvents TItem="BusinessPropertyModel" TValue="int" ValueChange="() => onProfileNameChange()"></DropDownListEvents>
                            <DropDownListFieldSettings Text="PropertyName" Value="Id"></DropDownListFieldSettings>
                        </SfDropDownList>
                    </div>
                </div>
            </div>
            <div class="card-body">

                <div class="row">
                    @if (businessGalleryViewModels.Count > 0)
                    {
                        @foreach (var item in businessGalleryViewModels.Select((value, i) => new { i, value }))
                        {
                            <div class="col-12 col-md-6">
                                <div class="card overflow-hidden mb-4">
                                    <div class="card-img-top hover-actions-trigger">
                                        <div class="hover-actions">
                                            @*<InputFile  @onclick="()=> uploadImage(item.value.Id)" class="opacity-0 w-100 h-100 position-absolute" />*@
                                            <a href="javascript:void();" @onclick="()=> uploadImage(item.value.Id, item.i + 1)" class="btn btn-dark mt-4 ms-2 btn-sm d-flex align-items-center" aria-label="Replace Image"><span class="far fa-cloud-upload-alt fa-2x me-2"></span>Change gallery image</a>
                                        </div>
                                        <img class="img-fluid" src="@item.value.ImageName" alt="Gallery Image @(item.i + 1)" />
                                        @*<a href="javascript:void();">
                                                <img class="img-fluid" src="@item.value.ImageName" alt="Gallery Image @(item.i + 1)" />
                                            </a>*@
                                    </div>
                                    <div class="card-body d-flex d-flex justify-content-between">
                                        <h5 class="card-title">Gallery Image @(item.i + 1)</h5>
                                        <div>
                                            <a href="javascript:void(0)" class="btn btn-falcon-default btn-sm" @onclick="()=>DeleteDialogOpen(item.value.Id)"><span class="far fa-trash-alt"></span></a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                    <div class="col-12 col-md-6">
                        <InputFile id="inputDrop" OnChange="OnInputFileChange" class="opacity-0 w-100 h-100 position-absolute" />
                        <div id="galleryImageUpload" class="my-4" @onclick="() => uploadImage()">
                            <div class="dz-message dropzone-area px-2 py-3">
                                <div class="text-center">
                                    <div class="far fa-cloud-upload-alt fa-4x d-block mx-auto mb-4"></div>
                                    <p><span class="far fa-image fa-lg me-2"></span>Upload your gallery image</p><p class="fs--1 text-400">Upload a 675 x 400 jpg image with <br>a maximum size of 800KB</p>
                                    <p class="fs--1">Drag and drop your files here or click to open file loading dialogue...</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <ImageCropper @ref="CropperModal" IsVisible="imageCroperActive" CropperConfiguration="cropperConfiguration" Cropped="OnCropped"></ImageCropper>

    </Authorized>
</AuthorizeView>

<DeleteConfirmation OpenDeleteDialog="openDeleteDialog" OnDialogClose="DialogClose" OnDeleteConfirmed="()=>ConfirmDelete(idForDelete)"></DeleteConfirmation>


@code
{

    private string title = "Gallery Images | Synergy Commerce Admin Panel";
    private Member currentMember = new Member();
    private ImageUploaderModal Modal { get; set; }
    private Boolean isLoading;
    private ImageCropperConfiguration cropperConfiguration = new ImageCropperConfiguration();
    private ImageCropper CropperModal { get; set; }
    private bool imageCroperActive = false;
    public bool SpinnerVisibility = true;
    bool IsConfirmModalVisible = false;
    private int changeImgId { get; set; }
    List<BusinessPropertyModel> BusinessProfiles { get; set; }
    List<BusinessGalleryViewModel> businessGalleryViewModels = new List<BusinessGalleryViewModel>();
    BusinessGalleryRequestViewModel currentImage;
    DeleteConfirmation DeleteConfirmation;
    bool openDeleteDialog = false;
    private int propertyId = 0;
    int idForDelete = 0;

    protected override async Task OnInitializedAsync()
    {
        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();
        BusinessProfiles = await _businessPropertyViewModel.GetBusinessProperties(currentMember.Id);
        if (BusinessProfiles.Count > 0)
        {
            propertyId = BusinessProfiles[0].Id;
            businessGalleryViewModels = await _businessGalleryViewModel.GetBusinessGallery(currentMember.Id, propertyId);
        }
        else
        {
            businessGalleryViewModels = new List<BusinessGalleryViewModel>();
        }

        SpinnerVisibility = false;
        StateHasChanged();
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var maxAllowedFiles = 1;
        var format = "image/png";

        currentImage = new BusinessGalleryRequestViewModel { BusinessId = currentMember.Id };
        foreach (var imageFile in e.GetMultipleFiles(maxAllowedFiles))
        {
            currentImage.Title = imageFile.Name;
            currentImage.ImageType = imageFile.ContentType;

            var buffer = new byte[imageFile.Size];
            await imageFile.OpenReadStream(buffer.LongLength).ReadAsync(buffer);
            var imageDataUrl =
                $"data:{format};base64,{Convert.ToBase64String(buffer)}";

            await CropperModal.OnFileChange(imageDataUrl);
            imageCroperActive = true;
        }
        StateHasChanged();
    }

    private void DialogClose() => openDeleteDialog = false;

    private void DeleteDialogOpen(int id)
    {
        openDeleteDialog = true;
        idForDelete = id;
    }

    async Task OnCropped(string value)
    {
        imageCroperActive = false;
        var base64 = value.Substring(value.IndexOf(',') + 1);
        currentImage.ImageContent = base64;
        currentImage.BusinessProperty = propertyId;
        currentImage.BusinessPropertyGuid = BusinessProfiles?.FirstOrDefault(x => x.Id == propertyId)?.PropertyGuid ?? Guid.Empty;
        currentImage.ImageIndex = imageIndex;
        SpinnerVisibility = true;
        if (changeImgId > 0)
        {
            currentImage.Id = changeImgId;
        }
        else
        {
            currentImage.Id = 0;
        }
        businessGalleryViewModels = await _businessGalleryViewModel.SaveGalleryImage(currentImage);
        changeImgId = 0;
        SpinnerVisibility = false;
        toastService.ShowToast(Constants.SaveMessage, ToastLevel.Success);

        StateHasChanged();
    }

    async Task ConfirmDelete(int delId)
    {
        if (delId > 0)
        {
            openDeleteDialog = false;
            SpinnerVisibility = true;
            businessGalleryViewModels = await _businessGalleryViewModel.DeleteGalleryImage(currentMember.Id, delId, propertyId);
            SpinnerVisibility = false;
            toastService.ShowToast(Constants.RemoveMessage, ToastLevel.Success);
        }
    }

    private async Task uploadImage()
    {
        imageIndex = 0;
        imageCroperActive = false;
        await CropperModal.TriggerFileSelect("inputDrop");
    }

    private void CloseDialog(MouseEventArgs arg)
    {
        IsConfirmModalVisible = false;
        idForDelete = 0;
    }
    private int imageIndex = 0;
    private async Task uploadImage(int Id, int index)
    {
        imageIndex = index;
        changeImgId = Id;
        imageCroperActive = false;
        await CropperModal.TriggerFileSelect("inputDrop");
    }

    private async void onProfileNameChange()
    {
        SpinnerVisibility = true;
        businessGalleryViewModels = await _businessGalleryViewModel.GetBusinessGallery(currentMember.Id, propertyId);
        SpinnerVisibility = false;
        StateHasChanged();
    }

}
