@page "/settings/orders/order-settings"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Enums
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Shared.Entities.v4;
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@inject IMemberViewModel _memberViewModel
@inject ILoginViewModel _loginViewModel
@inject ITicketViewModel _ticketViewModel
@inject IBusinessPropertyViewModel _propertyViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ILocalStorageService localStorage
@inject IOrderSettingsViewModel  _orderSettingsViewModel
@inject ISettingsViewModel _settingsViewModel
@inject ToastService toastService
@inject IBusinessPropertyViewModel _businessPropertyViewModel
@attribute [Authorize]

<Title Value="@title"></Title>
<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<EditForm Model="@orderSettings" Context="formContext" Class="row g-3">
    <DataAnnotationsValidator />
    <div class="card shadow-none border mb-1">
        <div class="card-header border-bottom">
            <div class="row justify-content-between">
                <div class="col-md">
                    <h5 class="mb-0"><a href="settings/orders" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="fa-regular fa-file-invoice-dollar me-2"></span>Order Settings</h5>
                </div>
                <div class="col-md-auto">
                    <button class="btn btn-sm btn-primary" @onclick="@(() => SaveOrderSettings(formContext))">Save</button>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="row mb-3">
                <div class="col-sm-6">
                    <label for="inputStartingOrderNumber" class="form-label">Starting Order# </label>
                    <InputText class="form-control" disabled="@startingOrderExists" @bind-Value="orderSettings.StartingOrderNumber" id="inputStartingOrderNumber" type="number" placeholder="1000"></InputText>
                    <ValidationMessage For="@(() => orderSettings.StartingOrderNumber)" />
                </div>
            </div>
            <div class="mb-3">
                <label class="form-label" for="inputTerms">Terms &amp; Conditions</label>
                <InputTextArea class="form-control" @bind-Value="orderSettings.TermsAndConditions" id="inputTerms" rows="4" maxlength="500" placeholder="Terms & Conditions (up to 500 characters)"></InputTextArea>
                <ValidationMessage For="@(() => orderSettings.TermsAndConditions)" />
            </div>
            <div>
                <label class="form-label" for="inputCustomerNote">Customer “Thank you” Message</label>
                <InputTextArea class="form-control" @bind-Value="orderSettings.CustomerNotes" id="inputCustomerNote" rows="4" maxlength="500" placeholder="Customer Notes (up to 500 characters)"></InputTextArea>
                <ValidationMessage For="@(() => orderSettings.CustomerNotes)" />
            </div>
        </div>
    </div>
    <div class="card shadow-none border mb-1">
        <div class="card-header border-bottom">
            <div class="row justify-content-between">
                <div class="col-md-auto">
                    <h5 class="mb-3 mb-md-0"><span class="fa-regular fa-cart-shopping me-2"></span>Shopping Cart</h5>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="col-sm-6">
                    <label class="form-label" for="inputMinimumQuantity">Minimum Quantity</label>
                    <input type="number" id="inputMinimumQuantity" class="form-control" value="1" />
                </div>
            </div>
            <div class="mb-3">
                <div class="col-sm-6">
                    <label class="form-label" for="inputMaximumQuantity">Maximum Quantity</label>
                    <input type="number" id="inputMaximumQuantity" class="form-control" value="9999" />
                </div>
            </div>
            <div class="mb-3">
                <div class="col-sm-6">
                    <label class="form-label" for="inputMaximumValue">Maximum Value</label>
                    <input type="number" id="inputMaximumValue" class="form-control" value="9999.99" />
                </div>
            </div>
            <div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="chkMergeIdenticalItemsinCart" checked>
                    <label class="form-check-label" for="chkMergeIdenticalItemsinCart">Merge Identical Items in Cart</label>
                </div>
            </div>
        </div>
    </div>
    <div class="card shadow-none border">
        <div class="card-header border-bottom">
            <div class="row justify-content-between">
                <div class="col-md-auto">
                    <h5 class="mb-3 mb-md-0"><span class="fa-regular fa-cog me-2"></span>Additional Settings</h5>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="chkSendOrderStatusUpdateNotifications" checked>
                    <label class="form-check-label" for="chkSendOrderStatusUpdateNotifications">Send Order Status Update Notifications</label>
                </div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="chkAllowOverrideofCompliance" checked>
                    <label class="form-check-label" for="chkAllowOverrideofCompliance">Allow Override of Compliance</label>
                </div>
            </div>
            <div class="mb-3">
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="chkAllowOrderMarkedPaidManually" checked>
                    <label class="form-check-label" for="chkAllowOrderMarkedPaidManually">Allow Order Marked Paid Manually</label>
                </div>
            </div>
            <div>
                <div class="form-check">
                    <input class="form-check-input" type="checkbox" id="chkAllowOrders" checked>
                    <label class="form-check-label" for="chkAllowOrders">Allow $0.00 Orders</label>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code
{
    private string title = "Order Configuration | Synergy Commerce Admin Panel";
    private bool SpinnerVisibility { get; set; } = false;
    private bool FirstRender { get; set; }
    private bool startingOrderExists { get; set; }

    Member currentMember = new Member();

    OrderSettingsRequestModel orderSettings = new OrderSettingsRequestModel();
    List<BusinessPropertyModel> businessProperties = new List<BusinessPropertyModel>();

    List<string> orderSettingsMetaKeys = new List<string>(){
        BusinessSettingsMetaKey.OrderSettingsStartingOrderNumber,
        BusinessSettingsMetaKey.OrderSettingsTermsAndConditions,
        BusinessSettingsMetaKey.OrderSettingsCustomerNotes
    };

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisibility = true;
        //Get current member information
        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();

        //Get Order Settings
        var response = await _settingsViewModel.GetBusinessSettingsListAsync(currentMember.Id, BusinessSettingsMetaNamespace.OrderSettings);
        foreach (var metaKey in orderSettingsMetaKeys)
        {
            var metaValue = response?.data?.Where(x => x.MetaKey == metaKey)?.FirstOrDefault()?.MetaValue ?? string.Empty;
            Helper.SetPropertyValue(orderSettings, metaKey, metaValue);//Note: meta key and request model property name should be same
        }

        int startingOrderNum;

        bool success = int.TryParse(orderSettings.StartingOrderNumber, out startingOrderNum);
        if (success)
        {
            var getStartingOrderCheck = await _orderSettingsViewModel.CheckOrderCreatedByStartingNumber(startingOrderNum);
            if (getStartingOrderCheck.success)
            {
                startingOrderExists = getStartingOrderCheck.data.OrderExistsWithStartingNumber;
            }
        }
        SpinnerVisibility = false;
    }

    public async Task SaveOrderSettings(EditContext editContext)
    {
        if (editContext.Validate())
        {
            SpinnerVisibility = true;
            var businessSettings = new List<BusinessSettingsRequestModel>();
            foreach (var key in orderSettingsMetaKeys)
            {
                var setting = new BusinessSettingsRequestModel();
                setting.BusinessId = currentMember.Id;
                setting.MetaNamespace = BusinessSettingsMetaNamespace.OrderSettings;
                setting.Title = string.Empty;
                setting.Description = string.Empty;
                setting.MetaKey = key;
                ValueTypeEnum valueType = (key == BusinessSettingsMetaKey.OrderSettingsStartingOrderNumber) ? ValueTypeEnum.Integer : Helper.GetPropertyDataType(orderSettings, key); //Note: meta key and request model property name should be same
                setting.MetaValue = (string)Helper.GetPropertyValue(orderSettings, key) ?? string.Empty;
                setting.ValueType = Convert.ToInt32(valueType);
                businessSettings.Add(setting);
            }
            var response = await _settingsViewModel.CreateBusinessSettingListAsync(businessSettings);
            SpinnerVisibility = false;
            if (response.success)
            {
                toastService.ShowToast(Constants.SettingsUpdateMessage, ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(response.error_info.description, ToastLevel.Error);
            }
        }
    }
}
