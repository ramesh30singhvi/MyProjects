@layout AuthorizedLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Entities.v4
@using CellarPassAppAdmin.Shared.Enums
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@inject IMemberViewModel _memberViewModel
@inject ILoginViewModel _loginViewModel
@inject ITicketViewModel _ticketViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ILocalStorageService localStorage
@inject ISettingsViewModel _settingsViewModel
@inject ToastService toastService
@attribute [Authorize]

<Title Value="@title"></Title>
<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<EditForm @ref="SynergyPaymentForm" Model="@synergyPayments" Context="formContext" Class="row g-3">
    <DataAnnotationsValidator />
    <div class="card shadow-none border-dashed">
        @*<div class="card-header border-bottom" hidden="@hide">
            <div class="row justify-content-between">
                <div class="col-md-auto">
                    <h5 class="mb-0"><a href="settings/integrated-partners" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="fa-regular fa-credit-card me-2"></span>Synergy Payments</h5>
                </div>
                <div class="col-md-auto">
                    @if (!IsActivePaymentGateway)
                    {
                        <button class="btn btn-sm btn-outline-secondary me-2 disabled">Save</button>
                    }
                    else
                    {
                        <button class="btn btn-sm btn-primary" @onclick="@(() => SaveSynergyPaymemnts(formContext))">Save</button>
                    }
                </div>
            </div>
        </div>*@
        <div class="card-body">
            <div class="mb-3">
                <label for="inputOpenEdgeXWebID" class="form-label">UserId</label>
                <InputText class="form-control" @bind-Value="@synergyPayments.UserId" id="inputSynergyPaymentsUserID" type="text" placeholder="User Id"></InputText>
                <ValidationMessage For="@(() => synergyPayments.UserId)" />
            </div>
            <div class="mb-3">
                <label for="inputOpenEdgeAuthKey" class="form-label">API Key</label>
                <InputText class="form-control" @bind-Value="@synergyPayments.APIKey" id="inputSynergyPaymentsAPIKey" type="text" placeholder="API Key"></InputText>
                <ValidationMessage For="@(() => synergyPayments.APIKey)" />
            </div>
            <div class="mb-3">
                <label for="inputOpenEdgeTerminalId" class="form-label">LocationId</label>
                <InputText class="form-control" @bind-Value="@synergyPayments.LocationId" id="inputSynergyPaymentsLocationID" type="text" placeholder="Location ID"></InputText>
                <ValidationMessage For="@(() => synergyPayments.LocationId)" />
            </div>
        </div>
    </div>
</EditForm>

@code {
    //[Parameter]
    //public bool? hide { get; set; }
    [Parameter]
    public List<BusinessPaymentProviderProfileSettingsViewModel>? data { get; set; }
    [Parameter]
    public List<CPSettingModel>? TicketingPaymentGatewayData { get; set; }
    private string title = "Synergy Payments | Synergy Commerce Admin Panel";
    private bool SpinnerVisibility { get; set; } = false;
    public EditForm SynergyPaymentForm { get; set; }

    Member currentMember = new Member();
    private bool IsActivePaymentGateway { get; set; } = false;
    SynergyPaymentsRequestModel synergyPayments = new SynergyPaymentsRequestModel();
    List<string> synergyPaymentsMetaKeys = new List<string>(){
        BusinessSettingsMetaKey.SynergyPaymentsUserId,
        BusinessSettingsMetaKey.SynergyPaymentsAPIKey,
        BusinessSettingsMetaKey.SynergyPaymentsLocationId
    };

    protected override void OnInitialized()
    {
        SpinnerVisibility = true;
        if (data != null && data.Any(x => x.MetaNamespace == BusinessSettingsMetaNamespace.SynergyPayments))
        {
            synergyPayments = new SynergyPaymentsRequestModel
            {
                UserId = data.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsUserId).FirstOrDefault()?.MetaValue ?? string.Empty,
                APIKey = data.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsAPIKey).FirstOrDefault()?.MetaValue ?? string.Empty,
                LocationId = data.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsLocationId).FirstOrDefault()?.MetaValue ?? string.Empty,
            };
        }
        else if (TicketingPaymentGatewayData != null)
        {
            synergyPayments = new SynergyPaymentsRequestModel
            {
                UserId = TicketingPaymentGatewayData.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsUserId).FirstOrDefault()?.MetaValue ?? string.Empty,
                APIKey = TicketingPaymentGatewayData.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsAPIKey).FirstOrDefault()?.MetaValue ?? string.Empty,
                LocationId = TicketingPaymentGatewayData.Where(x => x.MetaKey == BusinessSettingsMetaKey.SynergyPaymentsLocationId).FirstOrDefault()?.MetaValue ?? string.Empty,
            };
        }

        SpinnerVisibility = false;
    }

    public async Task SaveSynergyPaymemnts(EditContext editContext)
    {
        if (editContext.Validate())
        {
            SpinnerVisibility = true;
            var businessSettings = await Helper.BusinessSettingsMapping(synergyPayments, currentMember.Id, BusinessSettingsMetaNamespace.SynergyPayments, synergyPaymentsMetaKeys);
            var response = await _settingsViewModel.CreateBusinessSettingListAsync(businessSettings);
            SpinnerVisibility = false;
            if (response.success)
            {
                toastService.ShowToast(Constants.SettingsUpdateMessage, ToastLevel.Success);
            }
            else
            {
                toastService.ShowToast(response.error_info.description, ToastLevel.Error);
            }
        }
    }
}
