@page "/settings/pos/collections/{Id:guid}"
@page "/settings/pos/collections/create"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Shared.Services
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Enums
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@inject IProductViewModel _productViewModel
@inject IStoreCollectionViewModel _storeCollectionViewModel
@inject IStoreCollectionViewModel _storeCollectionViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ToastService toastService
@inject NavigationManager _navigationManager
@attribute [Authorize]

<Title Value="@title"></Title>
<SfSpinner @bind-Visible="isLoading"></SfSpinner>
<div class="card mb-3">
    <div class="card-header border-bottom">
        <div class="row justify-content-between align-items-center">
            <div class="col-md">
                <h5 class="mb-3 mb-md-0"><a href="settings/pos/collections" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="fa-regular fa-layer-group me-2"></span>@(Id != null ? collection.CollectionName : "Add POS Collection" )</h5>
            </div>
            <div class="col-auto">
                @if (isProcessing)
                {
                    <Loader />
                }
                <a class="btn btn-primary" href="javascript:void();" @onclick="() => SavePosCollectionAsync()" hidden="@(isProcessing)">Save</a>
            </div>
        </div>
    </div>
    <div class="card-body px-0">

        <form>

            <div class="mb-3 px-3">
                <label class="form-label" for="inputCollectionName">POS Collection Name</label>
                <input id="inputCollectionName" class="form-control" @bind-value="@collection.CollectionName" type="text" placeholder="Name of Collection" />
            </div>


            <div class="card shadow-none rounded-0 ">
                <div class="card-header border-bottom">
                    <label class="form-label">Products</label>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-12 col-md-6">
                            <label class="form-label" for="inputAddressSearch">Search</label>

                            <SfComboBox ID="inputGroupSearch" @bind-Value="@selectedProduct" @ref="filterProductsObj" AllowFiltering=true Placeholder="Search Products" DataSource="@products">
                                <ComboBoxEvents TItem="ProductListModel" TValue="string" ValueChange="SelectProduct" Filtering="OnFilterProducts"></ComboBoxEvents>
                                <ComboBoxFieldSettings Value="ProductTitle"></ComboBoxFieldSettings>
                            </SfComboBox>
                        </div>
                        <div class="col-12 col-md-6" hidden="@(collectionProducts.Count <= 0)">
                            <label class="form-label" for="selSortProductsBy">Sort</label>

                            <select id="selSortProductsBy" class="form-select" @bind="@collection.CollectionSortType" aria-label="Match Type" @onclick="OnSortProducts">
                                <option value="@((int)CollectionSortType.ProductNameA_Z)" selected>Product Name A-Z</option>
                                <option value="@((int)CollectionSortType.ProductNameZ_A)">Product Name Z-A</option>
                                <option value="@((int)CollectionSortType.Manual)">Manual</option>
                            </select>
                        </div>
                    </div>
                    @if (collectionProducts != null && collectionProducts.Count > 0)
                    {
                        @if (collection.CollectionSortType != (int)CollectionSortType.Manual)
                        {
                            <ul class="list-group">
                                @foreach (var item in collectionProducts)
                                {
                                    <li class="list-group-item d-flex justify-content-start align-items-center p-3">
                                        <span class="iemg-thumbnail far fa-image-polaroid fa-4x me-2" hidden="@(!string.IsNullOrEmpty(item.ProductImage))"></span>
                                        <img class="img-fluid img-thumbnail me-2" width="50" alt="@item.ProductTitle" src="@item.ProductImageURL" hidden="@(string.IsNullOrEmpty(item.ProductImage))" />
                                        <span class="flex-fill">@item.ProductTitle</span>
                                        <a href="javascript:void();" @onclick="@(() => RemoveProduct(item, false))" class="text-dark"><span class="far fa-trash-alt"></span></a>
                                    </li>
                                }
                            </ul>
                        }
                        else
                        {
                            <SfListBox TValue="string[]" DataSource="@collectionProducts" TItem="StoreCollectionProduct" AllowDragAndDrop="true" @ref="ListBoxObj" CssClass="rounded cp-list">
                                <ListBoxFieldSettings Text="ProductTitle" />
                                <ListBoxEvents TValue="string[]" TItem="StoreCollectionProduct"></ListBoxEvents>
                                <ListBoxTemplates TItem="StoreCollectionProduct">
                                    <ItemTemplate>
                                        <div class="d-flex justify-content-start align-items-center">
                                            <span class="far fa-sort me-2"></span>
                                            <span class="img-thumbnail far fa-image-polaroid fa-4x me-2" hidden="@(!string.IsNullOrEmpty((context as StoreCollectionProduct).ProductImageURL))"></span>
                                            <img class="img-fluid img-thumbnail me-2" width="50" alt="@((context as StoreCollectionProduct).ProductImageURL)" src="@((context as StoreCollectionProduct).ProductImageURL)" hidden="@(string.IsNullOrEmpty((context as StoreCollectionProduct).ProductImageURL))" />
                                            <span class="flex-fill">@((context as StoreCollectionProduct).ProductTitle)</span>
                                            <a href="javascript:void();" @onclick="@(() => RemoveProduct((context as StoreCollectionProduct), true))" class="text-dark"><span class="far fa-trash-alt"></span></a>
                                        </div>
                                    </ItemTemplate>
                                </ListBoxTemplates>
                            </SfListBox>
                        }
                    }
                </div>
            </div>

        </form>

    </div>
</div>

@code
{
    [Parameter]
    public Guid? Id { get; set; }
    private string title = "Edit POS Collection | Synergy Commerce Admin Panel";
    private bool isLoading;
    private string selectedProduct;
    private Member currentMember;
    private bool isProcessing;
    StoreCollectionFullDetail collection = new StoreCollectionFullDetail();
    List<ProductListModel> products = new List<ProductListModel>();
    ObservableCollection<StoreCollectionProduct> collectionProducts = new ObservableCollection<StoreCollectionProduct>();
    private StoreCollectionProduct existingCollectionProduct = null;
    SfComboBox<string, ProductListModel> filterProductsObj { get; set; }
    StoreCollectionRequestModel request = new StoreCollectionRequestModel();
    SfListBox<string[], StoreCollectionProduct> ListBoxObj = new SfListBox<string[], StoreCollectionProduct>();

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        collection.Products = new List<StoreCollectionProduct>();
        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();

        if (Id != null)
        {
            GetStoreCollectionDetailResponse response = await _storeCollectionViewModel.GetStoreCollectionDetails(Id.ToString(), 0);
            if (response.success)
            {
                collection = response.data;
                if (collection.Products != null && collection.Products.Count > 0)
                {
                    collectionProducts = new ObservableCollection<StoreCollectionProduct>(collection.Products);
                    OnSortProducts();
                }
            }
        }
        else
        {
            title = "Add POS Collection | Synergy Commerce Admin Panel";
            collection.Products = new List<StoreCollectionProduct>();
        }

        SearchProductResponse productResponse = await _productViewModel.SearchProducts(currentMember.Id, true, "");
        if (productResponse.success)
        {
            products = productResponse.data;
            if (products.Count > 0)
            {
                products = products.OrderBy(x => x.ProductTitle).ToList();
            }
        }

        isLoading = false;
    }


    private async void SavePosCollectionAsync()
    {
        isProcessing = true;
        request.Id = collection.Id;
        request.CollectionGuid = collection.CollectionGuid;
        request.BusinessId = currentMember.Id;
        request.CollectionName = collection.CollectionName;
        request.CollectionSortType = collection.CollectionSortType;

        if (collectionProducts.Count > 0)
        {
            request.Products = new List<StoreCollectionProduct>();
            if (collection.CollectionSortType != (int)CollectionSortType.Manual)
            {
                foreach (var item in collectionProducts.Select((value, i) => new { i, value }))
                {
                    item.value.SortIndex = item.i;
                    request.Products.Add(item.value);
                }
            }
            else
            {
                var collectionProductsListBox = ListBoxObj.GetDataList();
                foreach (var item in collectionProductsListBox.Select((value, i) => new { i, value }))
                {
                    item.value.SortIndex = item.i;
                    request.Products.Add(item.value);
                }
            }
        }

        AddEditStoreCollectionDetailResponse response = await _storeCollectionViewModel.AddUpdateCollection(request);
        if (response.success)
        {
            if (Id == null)
            {
                toastService.ShowToast(Constants.SaveMessage, ToastLevel.Success);
                _navigationManager.NavigateTo("/settings/pos/collections");
            }
            else
            {
                toastService.ShowToast(Constants.UpdateMessage, ToastLevel.Success);
            }
        }
        else
        {
            toastService.ShowToast(response.error_info.description, ToastLevel.Error);
        }

        isProcessing = false;
        StateHasChanged();
    }


    private void OnSortProducts()
    {
        if (collectionProducts.Count > 0)
        {
            if (collection.CollectionSortType == (int)CollectionSortType.ProductNameA_Z)
            {
                collectionProducts = new ObservableCollection<StoreCollectionProduct>(collectionProducts.OrderBy(x => x.ProductTitle));
            }
            else if (collection.CollectionSortType == (int)CollectionSortType.ProductNameZ_A)
            {
                collectionProducts = new ObservableCollection<StoreCollectionProduct>(collectionProducts.OrderByDescending(x => x.ProductTitle));
            }
            else if (collection.CollectionSortType == (int)CollectionSortType.Manual)
            {
                collectionProducts = new ObservableCollection<StoreCollectionProduct>(collectionProducts.OrderBy(x => x.SortIndex));
            }
        }

        StateHasChanged();
    }

    private void SelectProduct()
    {
        if (!string.IsNullOrEmpty(selectedProduct))
        {
            var product = products.Where(x => x.ProductTitle.ToLower() == selectedProduct.ToLower()).FirstOrDefault();
            if (collectionProducts != null && collectionProducts.Count > 0)
            {
                existingCollectionProduct = collectionProducts.Where(x => x.ProductTitle.ToLower() == selectedProduct.ToLower()).FirstOrDefault();
            }

            if (product != null && existingCollectionProduct == null)
            {
                StoreCollectionProduct collectionProduct = new StoreCollectionProduct()
                {
                    ProductId = product.Id,
                    ProductImageURL = product.ProductImageURL,
                    ProductImage = product.ProductImage,
                    ProductTitle = product.ProductTitle,
                    CollectionId = collection.Id
                };
                if (collectionProducts != null && collectionProducts.Count > 0)
                {
                    collectionProducts.Add(collectionProduct);
                    OnSortProducts();
                }
                else
                {
                    collectionProducts = new ObservableCollection<StoreCollectionProduct>();
                    collectionProducts.Add(collectionProduct);
                }

                if (collection.CollectionSortType == (int)CollectionSortType.Manual)
                {
                    var Item = new List<StoreCollectionProduct>();
                    Item.Add(collectionProduct);
                    ListBoxObj.AddItems(Item);
                }
            }
        }

        StateHasChanged();
    }

    private async void OnFilterProducts(FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var query = new Query().Where(new WhereFilter() { Field = "ProductTitle", Operator = "contains", value = args.Text, IgnoreCase = true });

        query = !string.IsNullOrEmpty(args.Text) ? query : new Query();

        await filterProductsObj.Filter(products, query);
    }

    private void RemoveProduct(StoreCollectionProduct product, bool isManual)
    {
        if (isManual)
        {
            var Item = new List<StoreCollectionProduct>{
    new StoreCollectionProduct
    {Id = product.Id, ProductTitle = product.ProductTitle,ProductImageURL= product.ProductImageURL}};
            ListBoxObj.RemoveItem(Item);
            collectionProducts.Remove(product);
        }
        else
        {
            collectionProducts.Remove(product);
        }
        StateHasChanged();
    }
    }
