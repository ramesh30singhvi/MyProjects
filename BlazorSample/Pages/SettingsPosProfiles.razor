@page "/settings/pos/profiles"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Web.Extensions.Head
@using Syncfusion.Blazor.Popups
@using CellarPassAppAdmin.Shared.Models.RequestModel
@using CellarPassAppAdmin.Shared.Enums
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System
@using System.Collections.Generic
@inject IMemberViewModel _memberViewModel
@inject ILoginViewModel _loginViewModel
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ISettingsViewModel _settingsViewModel
@inject ILocalStorageService localStorage
@inject ToastService toastService
@inject IPOSProfileViewModel _pOSProfileViewModel
@attribute [Authorize]


<Title Value="@title"></Title>
<SfSpinner @bind-Visible="SpinnerVisibility"></SfSpinner>
<div class="card shadow-none border">
    <div class="card-header border-bottom">
        <div class="row justify-content-between align-items-center">
            <div class="col-md">
                <h5 class="mb-0"><a href="settings/pos" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="far fa-store me-2"></span>POS Profiles</h5>
            </div>

            <div class="col-auto">
                <a class="btn btn-sm btn-primary" href="settings/pos/profiles/create">Add Profile</a>
            </div>
        </div>
    </div>
    <div class="card-body min-vh-50 p-0 sf-grid">
        <SfGrid DataSource="@pOSProfiles" AllowPaging="false" Width="100%" class="border-x-0">
            <GridColumns>
                <GridColumn HeaderText="Profile Name" TextAlign="TextAlign.Left" Width="200">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as POSProfileListModel);
                            <a class="btn btn-link text-800 fs--1" href="settings/pos/profiles/@profile.POSProfileGuid">@profile.POSProfileName</a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Address" Type="ColumnType.String" TextAlign="TextAlign.Left" Width="300">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as POSProfileListModel);
                            @(profile.POSProfileAddress)
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="Payment Profile" TextAlign="TextAlign.Left" Width="300">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as POSProfileListModel);
                            @(profile.PaymentProfile)
                        }
                    </Template>
                </GridColumn>
                <GridColumn HeaderText="" TextAlign="TextAlign.Right" Width="50">
                    <Template Context="profileContext">
                        @{
                            var profile = (profileContext as POSProfileListModel);
                            <button class="delete_icon" @onclick="()=>DeleteDialogOpen(profile.Id)">
                                <span class="far fa-trash-alt"></span>
                            </button>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

@*Delete confimation dialog*@
<DeleteConfirmation OpenDeleteDialog="openDeleteDialog" OnDialogClose="DialogClose" OnDeleteConfirmed="DeletePosProfile"></DeleteConfirmation>

@code
{
    bool openDeleteDialog = false;
    private string title = "POS Profiles | Synergy Commerce Admin Panel";
    Member currentMember = null;
    private bool SpinnerVisibility { get; set; } = false;
    List<POSProfileListModel> pOSProfiles = new List<POSProfileListModel>();
    int idForDelete = 0;

    protected override async Task OnInitializedAsync()
    {
        SpinnerVisibility = true;
        currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();

        var response = await _pOSProfileViewModel.GetPOSProfileList(currentMember.Id, true);
        pOSProfiles = response?.data ?? new List<POSProfileListModel>();
        SpinnerVisibility = false;
    }


    private void DialogClose() => openDeleteDialog = false;

    private void DeleteDialogOpen(int id)
    {
        openDeleteDialog = true;
        idForDelete = id;
    }

    private async Task DeletePosProfile()
    {
        SpinnerVisibility = true;
        var response = await _pOSProfileViewModel.UpdatePOSProfileStatus(
        new POSProfileStatusRequestModel
        {
            POSProfileId = idForDelete,
            POSProfileStatus = POSProfileStatus.inactive
        });
        openDeleteDialog = false;
        if (response.success)
        {
            var pOSProfileListResponse = await _pOSProfileViewModel.GetPOSProfileList(currentMember.Id, true);
            pOSProfiles = pOSProfileListResponse?.data ?? new List<POSProfileListModel>();
            SpinnerVisibility = false;
            toastService.ShowToast(Constants.DeleteMessage, ToastLevel.Success);
        }
        else
        {
            SpinnerVisibility = false;
            toastService.ShowToast("Error!", ToastLevel.Error);
        }
    }
}