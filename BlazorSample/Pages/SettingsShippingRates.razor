@page "/settings/shipping-rates"
@layout AuthorizedLayout
@using CellarPassAppAdmin.Client.ViewModels
@using CellarPassAppAdmin.Shared.Models
@using CellarPassAppAdmin.Shared.Models.ViewModel
@using CellarPassAppAdmin.Shared.Models.RequestModel 
@using CellarPassAppAdmin.Shared.Enums
@inject IShippingClassViewModel _shippingClassViewModel
@inject IShippingRatesViewModel _shippingRatesViewModel
@inject ICellarPassAuthenticationStateProvider _cellarPassAuthenticationStateProvider
@inject ToastService toastService
@attribute [Authorize]


<Title Value="@title"></Title>
<SfSpinner @bind-Visible="isLoading"></SfSpinner>
<div class="card">
    <div class="card-header bg-light">
        <div class="row justify-content-between align-items-center">
            <div class="col-md">
                <h5 class="mb-3 mb-md-0"><a href="settings/shipping" class="btn btn-falcon-default btn-sm px-2 me-3" title="Back"><span class="far fa-arrow-left me-1"></span></a><span class="far fa-shipping-fast me-2"></span>Shipping Rates</h5>
            </div>
            @{
                if (shippingRates.Any())
                {
                    <div class="col-auto">
                        <button type="button" @onclick="() => ShowAdjustRatesModal()" class="btn btn-sm btn-outline-primary">Adjust Rates</button>
                    </div>
                }
            }
            <div class="col-auto">
                <a class="btn btn-sm btn-primary" href="settings/shipping/create">Add New Rate</a>
            </div>
        </div>
    </div>
    <div class="card-body p-0">
        <SfGrid DataSource="shippingRates" AllowPaging="true" AllowSorting="true" Width="100%" Height="100%">
            <GridPageSettings PageSize="10"></GridPageSettings>
            <GridColumns>
                <GridColumn Field=@nameof(ShippingRateModel.IsActive) HeaderText="Active" TextAlign="TextAlign.Left" DisplayAsCheckBox="true" Width="40px"></GridColumn>
                <GridColumn Field=@nameof(ShippingRateModel.ShippingRateName) HeaderText="Shipping Rate Name" TextAlign="TextAlign.Left" Width="200px">
                    <Template>
                        @{
                            var reqRate = (context as ShippingRateModel);
                            <a href="/settings/shipping/edit/@reqRate.Id/@reqRate.IdGUID">@($"{reqRate.ShippingRateName}")</a>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(ShippingRateModel.ShippingTechnicalName) HeaderText="Technical Name" TextAlign="TextAlign.Left" Width="100px"></GridColumn>
                <GridColumn HeaderText="Shipping Class" TextAlign="TextAlign.Left" Width="150px">
                    <Template>
                        @{
                            var reqRate = (context as ShippingRateModel);
                            var shippingClass = shippingClasses.Where(x => x.Id == reqRate.ShippingClass).FirstOrDefault();
                            <p class="mt-3">@shippingClass.Class</p>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field=@nameof(ShippingRateModel.SortOrder) HeaderText="Sort" TextAlign="TextAlign.Left" Width="40px"></GridColumn>
                <GridColumn HeaderText="Sales Channels" TextAlign="TextAlign.Left" Width="200px">
                    <Template>
                        @{
                            var reqRate = (context as ShippingRateModel);
                            bool isWeb = reqRate.IsWebSalesChannel;
                            bool isPos = reqRate.IsPOSSalesChannel;
                            bool isClub = reqRate.IsClubSalesChannel;
                            bool isOMS = reqRate.IsOMSSalesChannel;

                            string channel = "";
                            if (isWeb)
                            {
                                channel = channel + "Web";
                            }
                            if (isPos)
                            {
                                if (!string.IsNullOrEmpty(channel))
                                {
                                    channel = channel + ", ";
                                }
                                channel = channel + "POS";
                            }
                            if (isClub)
                            {
                                if (!string.IsNullOrEmpty(channel))
                                {
                                    channel = channel + ", ";
                                }
                                channel = channel + "Club";
                            }
                            if (isOMS)
                            {
                                if (!string.IsNullOrEmpty(channel))
                                {
                                    channel = channel + ", ";
                                }
                                channel = channel + "OMS";
                            }
                            <p class="mt-3">@channel</p>
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>
</div>

<SfDialog Width="800px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsAdjustRatesModalVisible">
    <DialogTemplates>
        <Header>Adjust Rates</Header>
        <Content>
            <EditForm Model="adjustRates" @ref="adjustRatesForm" Context="formContext">
                <DataAnnotationsValidator />
                <content>
                    <div class="mb-3">
                        <div class="btn-group d-flex" role="group" aria-label="Adjust by button group">
                            <input type="radio" class="btn-check" name="btnAddSubstractGroup" id="btnAdd" autocomplete="off" checked>
                            <label class="btn btn-outline-primary w-50" @onclick="() => adjustRates.IsAdd = true" for="btnAdd">Add</label>

                            <input type="radio" class="btn-check" name="btnAddSubstractGroup" id="btnSubstract" autocomplete="off">
                            <label class="btn btn-outline-primary w-50" @onclick="() => adjustRates.IsAdd = false" for="btnSubstract">Subtract</label>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="inputDiscountSchema" class="form-label">Amount Type</label>
                        <InputSelect @bind-Value="adjustRates.AmountType" class="form-select">
                            @foreach (ShippingRatePercentDollarType adjustRateType in Enum.GetValues(typeof(ShippingRatePercentDollarType)))
                            {
                                <option value="@adjustRateType">@adjustRateType</option>
                            }
                        </InputSelect>
                    </div>
                    <div class="mb-3">
                        <label for="inputSurchargeRealtimeRates" class="form-label">Adjust Amount By</label>
                        <InputNumber min="0.01" class="form-control" id="inputSurchargeRealtimeRates" @bind-Value="adjustRates.Amount" />
                        <ValidationMessage For="@(() => adjustRates.Amount)" />
                    </div>
                </content>
            </EditForm>
            <div class="sf-grid">
                <SfGrid @ref="shippingRatesGrid" DataSource="shippingRates" AllowPaging="false" AllowSorting="true" Width="100%">
                    <GridEvents RowSelected="RowSelectHandler" RowDeselected="RowDeselectHandler" TValue="ShippingRateModel"></GridEvents>
                    <GridColumns>
                        <GridColumn Type="ColumnType.CheckBox" Width="50"></GridColumn>
                        <GridColumn Field=@nameof(ShippingRateModel.IsActive) HeaderText="Active" TextAlign="TextAlign.Center" DisplayAsCheckBox="true" Width="80px"></GridColumn>
                        <GridColumn Field=@nameof(ShippingRateModel.ShippingRateName) HeaderText="Shipping Rate Name" Width="160px">
                            <Template>
                                @{
                                    var reqRate = (context as ShippingRateModel);
                                    <a href="/settings/shipping/edit/@reqRate.Id/@reqRate.IdGUID">@($"{reqRate.ShippingRateName}")</a>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field=@nameof(ShippingRateModel.ShippingTechnicalName) HeaderText="Technical Name" Width="170px"></GridColumn>
                        <GridColumn HeaderText="Shipping Class" Width="140px">
                            <Template>
                                @{
                                    var reqRate = (context as ShippingRateModel);
                                    var shippingClass = shippingClasses.Where(x => x.Id == reqRate.ShippingClass).FirstOrDefault();
                                    <p class="mt-3">@shippingClass.Class</p>
                                }
                            </Template>
                        </GridColumn>
                        <GridColumn>
                            <Template>
                                @{
                                    var reqRate = (context as ShippingRateModel);
                                    bool isWeb = reqRate.IsWebSalesChannel;
                                    bool isPos = reqRate.IsPOSSalesChannel;
                                    bool isClub = reqRate.IsClubSalesChannel;
                                    bool isOMS = reqRate.IsOMSSalesChannel;

                                    string channel = "";
                                    if (isWeb)
                                    {
                                        channel = channel + "Web";
                                    }
                                    if (isPos)
                                    {
                                        if (!string.IsNullOrEmpty(channel))
                                        {
                                            channel = channel + ", ";
                                        }
                                        channel = channel + "POS";
                                    }
                                    if (isClub)
                                    {
                                        if (!string.IsNullOrEmpty(channel))
                                        {
                                            channel = channel + ", ";
                                        }
                                        channel = channel + "Club";
                                    }
                                    if (isOMS)
                                    {
                                        if (!string.IsNullOrEmpty(channel))
                                        {
                                            channel = channel + ", ";
                                        }
                                        channel = channel + "OMS";
                                    }
                                    <p class="mt-3">@channel</p>
                                }
                            </Template>
                        </GridColumn>

                    </GridColumns>
                </SfGrid>
                
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Cancel" OnClick="() => IsAdjustRatesModalVisible = false" />
        <DialogButton Disabled="@(!(selectedRates > 0))" Content="Adjust Rates" @onclick="ApplyAdjustRates" IsPrimary="true" />
    </DialogButtons>
</SfDialog>

<SfDialog Width="400px" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsAdjustRatesAppliedModalVisible">
    <DialogTemplates>
        <Header>Shipping Rates Adjusted</Header>
        <Content>
            <p class="mb-3">We have successfully adjusted the shipping tables as requested.</p>
            <p class="mb-3">We recommend review your rates to confirm accuracy after any adjustments.</p>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="OK" IsPrimary="true" CssClass="px-5" OnClick="() => IsAdjustRatesAppliedModalVisible = false" />
    </DialogButtons>
</SfDialog>

@code {
        private string title = "Shipping Rates | Synergy Commerce Admin Panel";
        private bool isLoading = true;
        List<ShippingRateModel> shippingRates = new List<ShippingRateModel>();
        List<ShippingClassModel> shippingClasses = new List<ShippingClassModel>();
        private Member currentMember = new Member();
        private bool IsAdjustRatesModalVisible = false;
        private bool IsAdjustRatesAppliedModalVisible = false;
        private AdjustRatesRequestModel adjustRates = new AdjustRatesRequestModel();
        SfGrid<ShippingRateModel> shippingRatesGrid = new SfGrid<ShippingRateModel>();
        EditForm adjustRatesForm;
        private int selectedRates { get; set; }

        protected override async Task OnInitializedAsync()
        {
            currentMember = await _cellarPassAuthenticationStateProvider.GetCurrentMemberAsync();
            var getShippingClasses = await _shippingClassViewModel.GetShippingClasses(currentMember.Id);
            if (getShippingClasses.success)
            {
                shippingClasses = getShippingClasses.data;
            }
            var getShippingRatesResponse = await _shippingRatesViewModel.GetShippingRates(currentMember.Id);
            if (getShippingRatesResponse.success)
            {
                shippingRates = getShippingRatesResponse.data;
            }
            isLoading = false;
        }

        private async Task ShowAdjustRatesModal()
        {
            selectedRates = 0;
            await shippingRatesGrid.ClearSelectionAsync();
            adjustRates = new AdjustRatesRequestModel { IsAdd = true };
        IsAdjustRatesModalVisible = true;
    }

    private async Task ApplyAdjustRates()
    {
        adjustRatesForm.EditContext.Validate();
        if (adjustRatesForm.EditContext.Validate())
        {
            IsAdjustRatesModalVisible = false;
            isLoading = true;
            adjustRates.ShippingRates = shippingRatesGrid.SelectedRecords.Select(x => x.Id).ToArray();
            var adjustRatesResponse = await _shippingRatesViewModel.AdjustRatesForMultipleShippingRates(adjustRates);
            if (adjustRatesResponse.success)
            {
                IsAdjustRatesAppliedModalVisible = true;
            }
            else
            {
                toastService.ShowToast(adjustRatesResponse.error_info.description, ToastLevel.Error);
            }
            isLoading = false;
        }

    }

    public void RowSelectHandler(RowSelectEventArgs<ShippingRateModel> args)
    {
        selectedRates = shippingRatesGrid.SelectedRecords.Count();
    }

    public void RowDeselectHandler(RowDeselectEventArgs<ShippingRateModel> args)
    {
        selectedRates = shippingRatesGrid.SelectedRecords.Count();
    }

}
